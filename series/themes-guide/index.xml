<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Themes Guide on IC Steve</title>
    <link>http://icsteve.com/series/themes-guide/</link>
    <description>Recent content in Themes Guide on IC Steve</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 11 Mar 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://icsteve.com/series/themes-guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CAD Framework: Cloud 带来的变化</title>
      <link>http://icsteve.com/2020/01/cad_framework_cloud/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://icsteve.com/2020/01/cad_framework_cloud/</guid>
      <description>CAD Framework 的目标是让使用者忘记框架，专心于具体的IC 设计工作。 Framework 能做的尽量让Framework 去做； Framework 不能做的，想办法让Framework 去做。 在</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>http://icsteve.com/2019/03/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://icsteve.com/2019/03/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rich Content</title>
      <link>http://icsteve.com/2019/03/rich-content/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://icsteve.com/2019/03/rich-content/</guid>
      <description>&lt;p&gt;Hugo ships with several &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes&#34;&gt;Built-in Shortcodes&lt;/a&gt; for rich content, along with a &lt;a href=&#34;https://gohugo.io/about/hugo-and-gdpr/&#34;&gt;Privacy Config&lt;/a&gt; and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>http://icsteve.com/2019/03/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://icsteve.com/2019/03/placeholder-text/</guid>
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de
pectora summo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>http://icsteve.com/2019/03/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://icsteve.com/2019/03/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>http://icsteve.com/2019/03/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://icsteve.com/2019/03/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://icsteve.com/2019/02/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://icsteve.com/2019/02/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
 https://github.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://icsteve.com/1/01/cad_asciinema_deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://icsteve.com/1/01/cad_asciinema_deploy/</guid>
      <description>Use Asciinema This is a terminal recording tool.
Enjoy a lightweight, purely text-based approach to terminal recording.
Deploymnet Make sure you have python3 installed.
I will use &amp;ldquo;Run from source&amp;rdquo; approach.
 download source  git clone https://github.com/asciinema/asciinema.git cd asciinema pwd   set PYTHONPATH  for bash
export PYTHONPATH=`pwd` ;  setenv PYTHONPATH `pwd` ;   Create command alias  alias asciinema=&amp;quot;python3 -m asciinema &amp;quot;  alias asciinema &#39;python3 -m asciinema \!</description>
    </item>
    
    <item>
      <title></title>
      <link>http://icsteve.com/1/01/cad_framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://icsteve.com/1/01/cad_framework/</guid>
      <description>CAD Framework： 来自90 年代的黄金准则 为什么起这个标题呢？我这篇文章的参考书目是两本来自90 年代的书，而里面的概念放到无论哪个先进的Framework 里都是妥妥的黄金准则（除了Cloud 的概念）：
 1992: Electronic CAD Frameworks 1994: CAD Frameworks: Principles and Architecture  在接下来的系列文章中，我会以这两本书为基础，结合实践中的问题，对CAD 做个系列教程，该教程的目标是让每一个工程人员都有能力去Handle CAD 相关的工作，全职兼职皆可。
什么是CAD Framework CAD Framework 是软件层面的一种架构，提供一套通用的运行环境供EDA 和 Utilities 的使用。
从这个层面来讲，CAD Framework 更多的偏向于软件，用于信息的管理和组织并像胶水一样把各个单独的节点粘合起来。像EDA 公司本身的工具如，Lynx 以及 Flow tool 都是对这个领域的尝试，但是它们更Foucus 在自家工具的生态中。而像ICManage 或者Cliosoft 这类公司，更多的把目光放眼在通用的Infrastructure 上，以及对Cloud 的支持。
数据管理  IP 数据管理  IP 的管理越来越受重视，一个是因为知识产权的管理和合理使用非常重要。一个公司偶尔会有不同部门在同一时间去license 相同类型的IP 的情况，还有其他类似资源没有合理利用的场景。
IP 的管理处理对vendor 信息的管理以为就是对具体的数据管理，不同的IP vendor 提供的数据不尽相同，命名规则各异，质量参差不齐。这就需要IP 数据管理平台对数据进行整理和清洗，对于IP 数据来说我们不能改动任何原始数据，但是我们可以进行分类，重新建立link，生成中间model等等，反正就是记住一个基本准则：不能改变原始数据，又将数据统一化管理。
 Process 数据管理  Process 的更新也是很快的，对同一个tech node，会有0.x 版本到1.x 版本的一路更新。对process 的管理目的在于能将正确的文件用于正确的工具。Foundary 提供了一整套能用于各大EDA 厂商的工具，是一个整的Package。把这个package 内的内容细分并有序组织便是Process 数据管理的价值所在。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://icsteve.com/1/01/cad_framework_deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://icsteve.com/1/01/cad_framework_deploy/</guid>
      <description>CAD Framework: 框架为什么难落地 一个框架的部署牵涉到的东西太多，这里聊聊为什么部署一个大而全的框架那么困难，sFramework 准备怎么做。
你到了一个新的公司，很多时候你不得不学习新公司的一整套工作模式，这样的工作模式是一种相对看得见的代码来说更加无形的一种框架，而且很多公司的文档并不那么齐全，做过几个项目以后你或许对无形的框架有一定的了解了，使用起来也得心应手了，我们有没有一个更好的解决方案呢。 sFramework 的出发点在哪里？
CAD Framework 可有可无 当Schedule 的大山压过来，什么都可以让路，不要说CAD Framework 了，尤其是CAD Framework 的support 有时候还不给力。
一个配置文件加一个脚本文件就是最简单的框架，运行时和配置分离的框架，不想用框架的人用这一个理由就够了。
所以当CAD Framework 的耦合性太大，就显得不够flexible，而当CAD Framework 太简单时，似乎没有了用的必要。
CAD Framework 部署和维护成本太高 当你需要一个Team 专职做CAD 的时候，那么你的Team 应该是个很大的Team 了，因为单个小Team 的交流都可以用吼一声来解决。
部署了CAD Framework 不管是软件也好，一套work flow 也好，都需要有人去维护，没有了support 的CAD Framework 无法存活。
sFramework 希望探索的路 如果要一个团队在一个小时的某CAD Framework介绍后就去使用这个CAD 框架，我相信这个是天方夜谭，就像之前说的两个理由，CAD 这个东西有或没有真的影响不大。
当一个资深工程师离职了，有没有把一些经验沉淀，传承？当你离职的时候，你是不是很多知识点都是基于原公司的work flow 上的，你自己的知识积累在哪里？
看客们，你同意以下说法吗？
 sFramework 基本核心功能均使用Tcl 编写，IC 行业的必备脚本语言，不会的请出列 sFramework 并不依赖于某家工具，集成多家工具很方便 sFramework 的各个模块可以单独使用，每个模块的功能可以使用插件来扩展，兼具了整体性和局部性 sFramework 面向的对象是一线工程师，所以都可以用这么一套框架来管理自己的项目，脚本和生成项目报告等 sFramework 可统一部署，并和一线工程师的个人部署无缝融合  sFramework 分离线版和在线版，离线版又分个人版和高级版，针对的对象不同，功能有所差异   sFramework 第一版的子功能开发测试  sFlow，脚本管理，让你的脚本活起来 sReport，报告管理，整合现在流行的Web 图表功能，轻松生成项目报告 sWeb，可以本地启动的Web 服务器，含多个基于网页的子模块，如生成ppt 等   sFramework 第二版子功能预告  sProject，管理项目，看板，todo，schedule 一个都不能少，还有更多 sResource，资源管理，所有的资源严格上都可以成为IP，不仅是design IP，流程还有文档等都是一种IP    </description>
    </item>
    
    <item>
      <title></title>
      <link>http://icsteve.com/1/01/document_flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://icsteve.com/1/01/document_flow/</guid>
      <description>我的文档工作流 （工具篇） 效果预期与知识储备 我在本文中分享我的文档工作流方法，那么你可以轻松用markdown 来表达自己，高效地管理下面一些工作中常用到的文档类型。
 产品手册 演示文档 邮件模板 代码管理 知识积累  知识储备 此内容适合所有人，无论是基础篇还是高级篇都不需要花费很大的时间精力去掌握，内容很直接，没有太难的学习曲线。
 基础篇  Markdown Unix Environment   高级篇  Javascript HTML/CSS    个人内容组织原则  所有内容必须能用最简单的文本编辑器打开 标记方法必须要尽量使用 定期做Review 和Update，知识之间要连接 避免知识内容收集的重复 给内容分等级，优先级的等级，专业程度的等级，兴趣的等级等等  即使我养成了上述习惯，我还是会定期去过一遍list，看最近是不是有哪几项没有做。
工具安装 WSL: Ubuntu 在Windows 环境中，推荐安装WSL。近几个月的更新，Windows 的Power Terminal，Visual Studio Code 已经可以很好地和WSL 互动了，开发的体验已经比之前好很多倍了。
Markdown Editor 近几年流行起来的Visual Studio Code 很好8用，安装也非常简单，https://code.visualstudio.com/ 从官网下载安装文件。
我之前购买过收费的markdown 工具，以前markdown 并没有像标配一样被很多工具支持，但我一看见它就被它的简洁吸引了，然后我逐渐去看更多和标记语言有关的内容和积累自己的库，比如js markdown-it，php parsedown，python Python-Markdown 当然还有很多啦。
Markdown 语法参考
https://www.markdownguide.org/basic-syntax/
Docsify 文档的框架分为两个派，一派是写完文档需要做一次“生成”的动作，另一派是直接动态解析源文件，没有一个中间生成的过程。
我偏向于直接解析Markdown 源文件的一派，Docsify 就是属于这一派。</description>
    </item>
    
  </channel>
</rss>
