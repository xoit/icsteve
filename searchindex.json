{"categories":[],"posts":[{"content":"CAD Framework 的目标是让使用者忘记框架，专心于具体的IC 设计工作。\n Framework 能做的尽量让Framework 去做； Framework 不能做的，想办法让Framework 去做。  在上一篇文章中，我们谈到了CAD Framework，我总结成八个字，“数据管理，接口管理”，当然涉及到细节就会有很多了，不同的应用，不同的数据类型，不同的接口设计。\n云来了 Cloud 的兴起，让算力得到了一定的解放，让服务更容易部署，也正改变着供应商的定价模式，以及使用者的操作方式。\n既然这么多方面都在悄然变化，那CAD Framework 不可能一成不变就可以适应新的事物。\n我刚刚提到的数据管理和接口管理，“云来了”并咩有改变数据管理的方式，直接影响的是接口管理，管理好接口一切都好办了。\n接口管理变革 互联网企业，或者互联网思维在“入侵”各行各业，也包括IC 行业，很多初创企业在从互联的角度对IC 使用到的数据进行管理，并结合经典的项目管理思想，形成了一套套的项目管理，数据管理方法论。\n数据的底层还是要结合各行各业的实际情况，IC 行业有自身独有的数据特征，底层数据管理变革的周期很长，想比10年前，或者二十年前来看并没有实质性的改变。\nCAD Framework 的演进是让数据管理变得更加科学，高效。\n数据隔离 传统的IT 架构中，只要有权限就可以访问本地数据。\n云端顾名思义，数据不在本地，当然我们可以登录到云端去，比如ssh，那么其实和本地操作无差，但单纯的把机器和环境搬到远程并不能发挥云的优势。\n云的演变从按机器资源为最小颗粒到以功能，以函数的调用提供服务。\n 租用云服务器，作为本地服务器的扩展，通过组网完成数据互通 租用Runtime，比如我只需要做一个dc 的综合并且希望充分利用资源最多一晚上要出结果 租用函数，我只需要做综合里的compile_ultra，前期以及后续都在本地完成  数据传输 数据的传输逐渐成为关注的焦点，安全性与便利性一直是一对矛盾体。\n纯文本，代码类型的传输起来没有一点压力，而版图数据等就不是那么方便了。\n 将数据分析，debug搬至云端，降低数据传输的频次 利用EDA shell来 debug 错峰传输，比如晚上  数据格式 虽然开一个socket通道，什么数据格式都可以传输。\n除了IC 的专有格式之外，配置也好，元数据也好，选择json应该是相对比较友好的格式。\n混合云/多云 每家云服务商的接口不尽相同，对于一个CAD框架来说，无论是面对本地环境也好，云环境也罢，都需要有一个坚实的底层架构。\n基础架构的健壮性可以做到不变应万变。\nReference  DAC 2019: Design on Cloud EDA is Better in the Cloud. Here’s Why the Cloud is the Future of EDA Optimizing Electronic Design Automation (EDA) Workflows on AWS 更多参考文献，加入知识星球可获得所有离线资源  ","id":0,"section":"posts","summary":"CAD Framework 的目标是让使用者忘记框架，专心于具体的IC 设计工作。 Framework 能做的尽量让Framework 去做； Framework 不能做的，想办法让Framework 去做。 在","tags":["shortcodes","privacy"],"title":"CAD Framework: Cloud 带来的变化","uri":"https://icsteve.com/2020/01/cad_framework_cloud/","year":"2020"},{"content":"一个框架的部署牵涉到的东西太多，这里聊聊为什么部署一个大而全的框架那么困难，sFramework 准备怎么做。\n你到了一个新的公司，很多时候你不得不学习新公司的一整套工作模式，这样的工作模式是一种相对看得见的代码来说更加无形的一种框架，而且很多公司的文档并不那么齐全，做过几个项目以后你或许对无形的框架有一定的了解了，使用起来也得心应手了，我们有没有一个更好的解决方案呢。 sFramework 的出发点在哪里？\nCAD Framework 可有可无 当Schedule 的大山压过来，什么都可以让路，不要说CAD Framework 了，尤其是CAD Framework 的support 有时候还不给力。\n一个配置文件加一个脚本文件就是最简单的框架，运行时和配置分离的框架，不想用框架的人用这一个理由就够了。\n所以当CAD Framework 的耦合性太大，就显得不够flexible，而当CAD Framework 太简单时，似乎没有了用的必要。\nCAD Framework 部署和维护成本太高 当你需要一个Team 专职做CAD 的时候，那么你的Team 应该是个很大的Team 了，因为单个小Team 的交流都可以用吼一声来解决。\n部署了CAD Framework 不管是软件也好，一套work flow 也好，都需要有人去维护，没有了support 的CAD Framework 无法存活。\nsFramework 希望探索的路 如果要一个团队在一个小时的某CAD Framework介绍后就去使用这个CAD 框架，我相信这个是天方夜谭，就像之前说的两个理由，CAD 这个东西有或没有真的影响不大。\n当一个资深工程师离职了，有没有把一些经验沉淀，传承？当你离职的时候，你是不是很多知识点都是基于原公司的work flow 上的，你自己的知识积累在哪里？\n看客们，你同意以下说法吗？\n sFramework 基本核心功能均使用Tcl 编写，IC 行业的必备脚本语言，不会的请出列 sFramework 并不依赖于某家工具，集成多家工具很方便 sFramework 的各个模块可以单独使用，每个模块的功能可以使用插件来扩展，兼具了整体性和局部性 sFramework 面向的对象是一线工程师，所以都可以用这么一套框架来管理自己的项目，脚本和生成项目报告等 sFramework 可统一部署，并和一线工程师的个人部署无缝融合  sFramework 分离线版和在线版，离线版又分个人版和高级版，针对的对象不同，功能有所差异   sFramework 第一版的子功能开发测试  sFlow，脚本管理，让你的脚本活起来 sReport，报告管理，整合现在流行的Web 图表功能，轻松生成项目报告 sWeb，可以本地启动的Web 服务器，含多个基于网页的子模块，如生成ppt 等   sFramework 第二版子功能预告  sProject，管理项目，看板，todo，schedule 一个都不能少，还有更多 sResource，资源管理，所有的资源严格上都可以成为IP，不仅是design IP，流程还有文档等都是一种IP    ","id":1,"section":"posts","summary":"一个框架的部署牵涉到的东西太多，这里聊聊为什么部署一个大而全的框架那么困难，sFramework 准备怎么做。 你到了一个新的公司，很多时候你不","tags":["shortcodes","privacy"],"title":"CAD Framework: 框架为什么难落地","uri":"https://icsteve.com/2020/01/cad_framework_deploy/","year":"2020"},{"content":"为什么起这个标题呢？我这篇文章的参考书目是两本来自90 年代的书，而里面的概念放到无论哪个先进的Framework 里都是妥妥的黄金准则（除了Cloud 的概念）：\n 1992: Electronic CAD Frameworks 1994: CAD Frameworks: Principles and Architecture  在接下来的系列文章中，我会以这两本书为基础，结合实践中的问题，对CAD 做个系列教程，该教程的目标是让每一个工程人员都有能力去Handle CAD 相关的工作，全职兼职皆可。\n什么是CAD Framework CAD Framework 是软件层面的一种架构，提供一套通用的运行环境供EDA 和 Utilities 的使用。\n从这个层面来讲，CAD Framework 更多的偏向于软件，用于信息的管理和组织并像胶水一样把各个单独的节点粘合起来。像EDA 公司本身的工具如，Lynx 以及 Flow tool 都是对这个领域的尝试，但是它们更Foucus 在自家工具的生态中。而像ICManage 或者Cliosoft 这类公司，更多的把目光放眼在通用的Infrastructure 上，以及对Cloud 的支持。\n数据管理  IP 数据管理  IP 的管理越来越受重视，一个是因为知识产权的管理和合理使用非常重要。一个公司偶尔会有不同部门在同一时间去license 相同类型的IP 的情况，还有其他类似资源没有合理利用的场景。\nIP 的管理处理对vendor 信息的管理以为就是对具体的数据管理，不同的IP vendor 提供的数据不尽相同，命名规则各异，质量参差不齐。这就需要IP 数据管理平台对数据进行整理和清洗，对于IP 数据来说我们不能改动任何原始数据，但是我们可以进行分类，重新建立link，生成中间model等等，反正就是记住一个基本准则：不能改变原始数据，又将数据统一化管理。\n Process 数据管理  Process 的更新也是很快的，对同一个tech node，会有0.x 版本到1.x 版本的一路更新。对process 的管理目的在于能将正确的文件用于正确的工具。Foundary 提供了一整套能用于各大EDA 厂商的工具，是一个整的Package。把这个package 内的内容细分并有序组织便是Process 数据管理的价值所在。\n把数据管理起来对于comparison，tracing，debugging 都是很有帮助的。\n Design 数据管理  开始做项目了，数据的输入输出管理也是很重要的，保留这些数据并妥善管理对于项目的正确进行尤其重要。\n有些公司用的是全部打包，archive all，有些公司则用按需打包，release control。\n不管哪种方法，都是希望把设计数据版本化，方便数据的Handover，以及在数据发生意外的时候恢复数据。\n工具管理  EDA 工具 / Server 管理  EDA 工具的管理很多时候看似都是IT 的活，但是对于工具装好以后，License 的使用统计，EDA 的Runtime 统计都是关系到项目cost 的，需要和项目挂钩。而和项目挂钩的问题，最后都纳入到CAD Framework 里。\n Utilities  还有一些平时用于项目的，或者通用的脚本，如何管理和复用以增强今后的工作效率，这些都是需要靠CAD Framework 去保证的。\n流程管理 流程管理虽然在整个CAD Framework 里比重不多，但是它是工程师每天打交道的部分，设计上要充分考虑用户体验和不断做正向反馈修正。\n流程管理也是接下来会讲的重中之重，会剖析一些开源的框架，分析利弊，结合实际总结。每个框架都有自己的适用范围，并没有绝对的孰好孰坏，有些框架对于小公司太过冗余，有些对于大公司过于简单。\n流程管理要兼顾流程的划分，Team 和Team 之间的合作衔接，以及Flow 开发人员和项目的合作，还有一个重要的是后续的Support 以及用户的反馈机制。\n当然具体细节来说，比如流程开发人员怎么介入debug 项目，design 工程师怎么去workaround 既有流程满足自己的需求。\n人力管理 有人说这个是公司HR 的事情，也不全是。如果你做为一个Manager 想要了解各个环节中所花费的人力资源有多少，通过这个数据来优化项目流程，缩短开发周期。所以周报，日报系统并不是简单地汇报一下做了什么。\n自建还是购买 无论自建还是购买，都需要一定的CAD 人力资源的配置，全职的CAD 工程师或者某些设计人员的兼职CAD 角色。所以对Design Engineer 做CAD 相关的培训是很有必要的。\nReference  Electronic CAD Frameworks CAD Frameworks: Principles and Architecture  ","id":2,"section":"posts","summary":"为什么起这个标题呢？我这篇文章的参考书目是两本来自90 年代的书，而里面的概念放到无论哪个先进的Framework 里都是妥妥的黄金准则（除了C","tags":["shortcodes","privacy"],"title":"CAD Framework： 来自90 年代的黄金准则","uri":"https://icsteve.com/2020/01/cad_framework/","year":"2020"},{"content":"This is a terminal recording tool.\nEnjoy a lightweight, purely text-based approach to terminal recording.\nDeploymnet Make sure you have python3 installed.\nI will use \u0026ldquo;Run from source\u0026rdquo; approach.\n download source  git clone https://github.com/asciinema/asciinema.git cd asciinema pwd   set PYTHONPATH  for bash\nexport PYTHONPATH=`pwd` ;  setenv PYTHONPATH `pwd` ;   Create command alias  alias asciinema=\u0026quot;python3 -m asciinema \u0026quot;  alias asciinema 'python3 -m asciinema \\!*' ;  Recording asciinema rec test.cast  Display \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;http://icsteve.com/vendor/asciinema-player/asciinema-player.css\u0026quot; /\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;http://icsteve.com/assert/default.css\u0026quot; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var args={}; args[\u0026quot;f\u0026quot;]=\u0026quot;test\u0026quot; ; if (typeof args[\u0026quot;f\u0026quot;]!==\u0026quot;undefined\u0026quot; \u0026amp;\u0026amp; args[\u0026quot;f\u0026quot;]!==null) { document.write(\u0026quot;\u0026lt;asciinema-player src=\\\u0026quot;assert/\u0026quot;+args[\u0026quot;f\u0026quot;]+\u0026quot;.cast\\\u0026quot; cols=\\\u0026quot;120\\\u0026quot; font-size=\\\u0026quot;16px\\\u0026quot; theme=\\\u0026quot;monokai\\\u0026quot;\u0026gt;\u0026lt;/asciinema-player\u0026gt;\u0026quot;) ; } else { document.write(\u0026quot;Please provide URL argument like: ?show=demo_name.\u0026quot;) ; } \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/asciinema-player/asciinema-player.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Showtime http://icsteve.com/demo/asciinema-player.html\n","id":3,"section":"posts","summary":"This is a terminal recording tool.\nEnjoy a lightweight, purely text-based approach to terminal recording.\nDeploymnet Make sure you have python3 installed.\nI will use \u0026ldquo;Run from source\u0026rdquo; approach.\n download source  git clone https://github.com/asciinema/asciinema.git cd asciinema pwd   set PYTHONPATH  for bash\nexport PYTHONPATH=`pwd` ;  setenv PYTHONPATH `pwd` ;   Create command alias  alias asciinema=\u0026quot;python3 -m asciinema \u0026quot;  alias asciinema 'python3 -m asciinema \\!","tags":["shortcodes","privacy"],"title":"Use Asciinema","uri":"https://icsteve.com/2020/01/cad_asciinema_deploy/","year":"2020"},{"content":"效果预期与知识储备 我在本文中分享我的文档工作流方法，那么你可以轻松用markdown 来表达自己，高效地管理下面一些工作中常用到的文档类型。\n 产品手册 演示文档 邮件模板 代码管理 知识积累  知识储备 此内容适合所有人，无论是基础篇还是高级篇都不需要花费很大的时间精力去掌握，内容很直接，没有太难的学习曲线。\n 基础篇  Markdown Unix Environment   高级篇  Javascript HTML/CSS    个人内容组织原则  所有内容必须能用最简单的文本编辑器打开 标记方法必须要尽量使用 定期做Review 和Update，知识之间要连接 避免知识内容收集的重复 给内容分等级，优先级的等级，专业程度的等级，兴趣的等级等等  即使我养成了上述习惯，我还是会定期去过一遍list，看最近是不是有哪几项没有做。\n工具安装 WSL: Ubuntu 在Windows 环境中，推荐安装WSL。近几个月的更新，Windows 的Power Terminal，Visual Studio Code 已经可以很好地和WSL 互动了，开发的体验已经比之前好很多倍了。\nMarkdown Editor 近几年流行起来的Visual Studio Code 很好8用，安装也非常简单，https://code.visualstudio.com/ 从官网下载安装文件。\n我之前购买过收费的markdown 工具，以前markdown 并没有像标配一样被很多工具支持，但我一看见它就被它的简洁吸引了，然后我逐渐去看更多和标记语言有关的内容和积累自己的库，比如js markdown-it，php parsedown，python Python-Markdown 当然还有很多啦。\nMarkdown 语法参考\nhttps://www.markdownguide.org/basic-syntax/\nDocsify 文档的框架分为两个派，一派是写完文档需要做一次“生成”的动作，另一派是直接动态解析源文件，没有一个中间生成的过程。\n我偏向于直接解析Markdown 源文件的一派，Docsify 就是属于这一派。\nhttps://docsify.js.org/\n几乎无需安装，一个index.html 就可以完成工作，sWeb 已经将这个实例放到了template 内，包括所有的js 和css。\n 快速开始 如何设置sidebar 如何设置navbar  下面是 http://icsteve.com 使用的index.html，外加了几个有用的插件。\n toc external-script search docsify-pagination docsify-tabs docsify-example-panels emoji pdfobject docsify-pdf-embed ocsify-plugin-flexible-alerts docsify-footer-enh zoom-image  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- No \u0026lt;base target=\u0026quot;_blank\u0026quot;\u0026gt; --\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;IE=edge,chrome=1\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;icsteve.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/toc.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;shortcut icon\u0026quot; href=\u0026quot;favicon.ico\u0026quot; type=\u0026quot;image/x-icon\u0026quot;\u0026gt; \u0026lt;style\u0026gt; :root { --docsifytabs-border-color: #ededed; --docsifytabs-tab-highlight-color: purple; } h1 .anchor span { color: #f05e2f ; } .emoji { height: 0.91rem ; padding-bottom:3px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body onload=\u0026quot;WaveDrom.ProcessAll()\u0026quot;\u0026gt; \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt;Please wait...\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; window.$docsify = { basePath:\u0026quot;.\u0026quot;, search: 'auto', subMaxLevel:5, loadSidebar: true, loadNavbar: true, tabs: { persist : true, // default sync : true, // default theme : 'classic', // default tabComments: true, // default tabHeadings: true // default }, alias: { '/.*/_sidebar.md': '/sidebar.md' ,'/.*/_navbar.md': '/navbar.md' ,'/_navbar.md': '/navbar.md' ,'/_sidebar.md': '/sidebar.md' } ,footer: { copy: '\u0026lt;span\u0026gt;IC Steve \u0026amp;copy; 2019\u0026lt;/span\u0026gt;', auth: ' 转载引用请注明出处', pre: '\u0026lt;br/\u0026gt;', style: 'text-align: right;' } } if (typeof navigator.serviceWorker !== 'undefined') { navigator.serviceWorker.register('sw.js') } \u0026lt;/script\u0026gt; \u0026lt;!-- libraries --\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/docsify.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/external-script.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/search.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-pagination.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-tabs.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-example-panels.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/emoji.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/pdfobject.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-pdf-embed.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-plugin-flexible-alerts.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-footer-enh.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/zoom-image.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- \u0026lt;script src=\u0026quot;./vendor/docsify/4.8.3/plugins/toc.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  更多开箱即用的实例请关注ICSteve 知识星球 （收费）。\nMarp Marp 的官网：https://marpit.marp.app/\n安装Marp 的Cli 工具。\nnpm install --save-dev @marp-team/marp-cli -g marp -v   @marp-team/marp-cli v0.16.2 (w/ @marp-team/marp-core v0.15.2)\n Marpit 可以做为库使用，内部使用了markdown-it 解释markdown 文件的结构。\nMarp 可以使用theme，我制作了一个theme 以及background，很容易制作一个模板。我制作了我司的PPT 模板的Marp theme，markdown 直接生成PPT 是HTML 格式，方便更新的发布，不像固定的文件需要不断的发送PPT 文件，HTML 在浏览器里浏览，也很容易保存成PDF，Marp 本身也可以存为PDF 格式。\n更多开箱即用的实例请关注ICSteve 知识星球 （收费）。\nMjml https://mjml.io/\n由于Outlook 显示HTML 的方式就像IE 一样特殊，要很多特殊的处理方式。MJML 使用自己的标记语言来统一各个平台下的显示问题，一套语法适合桌面端客户端（Outlook 等）以及移动端各种邮件app。\n对于这个工具我并没有完全部署到我自己的环境中，只是参考它转换出来的HTML，并参考这些HTML 搭建自己的HTML 邮件模板。\n更多开箱即用的实例请关注ICSteve 知识星球 （收费）。\nAsciinema 这个工具可以帮助你录制Terminal 的一个工具，效果可以参考\nhttps://asciinema.org/\n我并没有安装，使用的是 Running from source\ngit clone https://github.com/asciinema/asciinema.git cd asciinema python3 -m asciinema --version  录制完成后，可以通过asciinema-player 来对录制的内容进行播放，可以轻松插入到docsify 文档中。\n更多开箱即用的实例请关注ICSteve 知识星球 （收费）。\nWebserver 很多内容是已经往web 方向发展了，所以我们需要假设一个本地的服务器以测试和运行很多功能，当然nodejs 本身有server 模块，为了简单和扩展，我也安装了XAMPP，而且平时也会用到nodejs 的server 以及sWeb。\nhttps://www.apachefriends.org/index.html\n工具篇总结 互联网还在初期发展阶段的时候，掌握word 和excel 是很多工作，学习的一大技能，可以让你所做的事情事半功倍，现在掌握一些Web 技能，Python 技能，Tcl 技能或者其他脚本程序，这种过程非常类似那时候的office 技能，这些基本技能也正在被逐渐加入到课堂。\n当然我们不能只停留在使用的阶段，工具越来越开放，我们使用工具的方式正在变化。\n更多开箱即用的实例请关注ICSteve 知识星球 （收费）。\n","id":4,"section":"posts","summary":"效果预期与知识储备 我在本文中分享我的文档工作流方法，那么你可以轻松用markdown 来表达自己，高效地管理下面一些工作中常用到的文档类型。 产","tags":["shortcodes","privacy"],"title":"我的文档工作流 （工具篇）","uri":"https://icsteve.com/2020/01/document_flow/","year":"2020"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:\n  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}   To enable KaTex globally set the parameter math to true in a project's configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions Examples Inline math: \\( \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… \\)\nBlock math:\n\\[ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } \\]\n","id":5,"section":"posts","summary":"\u003cp\u003eMathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\u003c/p\u003e","tags":null,"title":"Math Typesetting","uri":"https://icsteve.com/2019/03/math-typesetting/","year":"2019"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","id":6,"section":"posts","summary":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.","tags":null,"title":"About","uri":"https://icsteve.com/2019/02/about/","year":"2019"}],"tags":[{"title":"privacy","uri":"https://icsteve.com/tags/privacy/"},{"title":"shortcodes","uri":"https://icsteve.com/tags/shortcodes/"}]}