{"categories":[{"title":"CAD","uri":"https://icsteve.com/zh/categories/cad/"},{"title":"English","uri":"https://icsteve.com/zh/categories/english/"},{"title":"HMC","uri":"https://icsteve.com/zh/categories/hmc/"},{"title":"LEARNING","uri":"https://icsteve.com/zh/categories/learning/"},{"title":"Notion","uri":"https://icsteve.com/zh/categories/notion/"},{"title":"Project","uri":"https://icsteve.com/zh/categories/project/"},{"title":"RUI","uri":"https://icsteve.com/zh/categories/rui/"},{"title":"THOUGHT","uri":"https://icsteve.com/zh/categories/thought/"}],"posts":[{"content":"在IC（集成电路）行业，CAD 是一种使硬件设计者的工作变得简单的工具。我称CAD 为工具，这就是我对硬件设计中的CAD 的定义。而让工作变得更\u0026quot;简单\u0026quot;包含了几层不同的含义。\n 输入很简单 过程很简单 结果检查很简单(准确和可靠)  很多人总是喜欢用苹果产品作为例子。我也是。\n苹果并不炫耀自己的先进技术，更倾向开发适合当前消费的技术。\n最先进的技术通常意味着更多的风险。但是，把最适合客户的优越技术放在一起，是成功的关键。\n所以最好的解决方案永远是最适合场景的方案，并不总是最先进，最优的方案。\n硬件流程的 CAD 框架是为专业人士设计的 为什么第一个小标题是这个呢，我们首先要明确自己的使用CAD 产品的用户群是谁 —— 是硬件设计师，他们都是硬件设计行业内的专家。\n当我第一次加入CAD 小组时，我就在想如何才能帮助专业人士呢？\n我也经历了两个阶段，第一个是比专业人士更专业，第二个是成为专业人士的伙伴。\n我需要找出我对CAD 工具用户的价值，对我们的专业硬件设计师的价值，因为在制作芯片方面我不可能比所有领域的都专业，即使我有过硬的某些方面的专业知识，实际的项目中情况千变万化，怎么才能赋能他们让他们变得更强是我的终极目标。\n由于VLSI CAD 产品的客户都是专业的硬件工程师，CAD 实用程序的目标就是开发一套能够帮助提高准确性、赋能生产力的工具链。\n 工具链数据必须容易获得 工具链数据必须易于发送 工具链数据必须使用数据  这里的数据包括实实在在的数据和处理数据的函数等。\n如果我们把CAD 框架放在一个大组织中，某种程度的自动化也就意味着更多的标准化。\n良好做法1：最小的惊奇 a.k.a. 最少的惊讶\n配置总是一个很好的例子来解释这个规则。\n在CAD工具中，我们可能有多种方式来配置操作。\n 其中一些是来自环境变量 有些是来自于配置文件，如（yaml，json）。 有些是来自项目钩子、默认值等。 有些是来自于移交标准 有些是来自EDA工具本身。  有时我们无法避免引入混乱。那么问题就变成了如何解决这个问题，清除混乱。\n单一真实来源(SSoT) 在平台的配置文件中，我们可能有一个if-else语句来根据条件进行切换。这种情况下，学习曲线就会相对来说比较陡峭，不适合新项目。CAD 平台的用户们会拒绝迁移。\n即使工程师掌握了一次平台的使用方法，他们也会在下一个项目中需要再次学习，妥妥的增加了很多额外的成本。\n理想的情况是，在我们的平台上，所有的实用程序都可以从一个来源读取配置。\n但这个做法在实际中并不是那么通用的，硬件设计还没有达到完全或者高度人工智能的要求。在日常工程工作中，我们的工程师仍然需要处理大量的案例。\n所以解决方案是，我们可以将功能拆分，或者将功能逐层模块化。每一层，我们都有API，或者我们称之为配置文件，用于输入和输出。\n输入和输出在一个条目文件中被很好地定义。这个文件被称为 \u0026ldquo;Metadata\u0026rdquo;，API应该始终如一地提供 \u0026ldquo;Metadata\u0026rdquo;，而不是猜测。\n{ \u0026quot;metadata\u0026quot; : { \u0026quot;name\u0026quot; : \u0026quot;flow_config\u0026quot;, \u0026quot;user\u0026quot;: \u0026quot;icsteve\u0026quot;, \u0026quot;$rel\u0026quot;: { \u0026quot;connect\u0026quot; : \u0026quot;connect_api_1\u0026quot; } }, \u0026quot;Dataset\u0026quot; : { \u0026quot;width\u0026quot; : 100, \u0026quot;height\u0026quot; : 100 } }  在真实场景中，我们可以有更多的约束。比如，数据集必须是对象，k-v对。\n我们不把这个规则理解为一个单一的文件，而是带来了元数据的概念，它代表了 \u0026ldquo;单一来源\u0026rdquo;。\n而在元数据中，我们还需要描述每个元数据键之间的关系。这也可以是元数据的一部分。\n关系（$rel）是某些业务需求的逻辑，所以需要产品SPEC来描述如何使用和解释关系。\n无歧义 在编写需求/模式或配置时，\u0026ldquo;毫不含糊 \u0026ldquo;总是被谈及。\n有些配置使用on|off或1|0就很好，那么我们应该保持简单。\n有时1或0是不知道要做什么的，所以我们可能需要精确地使用这个词。\n在定义模式或设计配置时，最好是把它发给不同的人审阅。 如果有任何问题进入你的邮箱，那说明这个设置不够清楚，会发生什么。\n###约定与配置\n我更喜欢明确的配置，而不是惯例。\n但惯例（默认命名）可以使配置变得相当简单。\n良好做法2：引导而不是指责 当用户提出使用问题，或者他们滥用一些选项时。\n你是否只是回答。\u0026ldquo;请阅读文档！！！\u0026rdquo;\n不！不！! 不!!!\n大多数用户都是使用EDA（电子设计自动化）工具的资深用户。\n如果用户不清楚，那就意味着__目前的实用设计理念很糟糕！__。\n我总是建议新来的CAD人员参加几个项目的tapeout。然后我们就可以得到我们的客户所面临的真实场景。\n当然，软件和硬件有相同的基础。但是，仍然有一些DDD（领域驱动设计）的差异。\n实例和模板 提供足够的模板和例子，使用户尽可能快地进入。\n模板是必不可少的。用户能够从模板（菜谱）开始，这些模板是经过CAD开发人员测试的。\n为了教育用户，我们应该怎么做？\nHowTo 开发一个培训材料，帮助用户建立知识。\nWhatNext 当一个错误发生时，尝试给出。\n 发生了什么，错误信息，错误代码，等等。 错误代码的位置，如果可能的话突出显示 给出建议，下一步是什么  Dryrun 我们有数以千计的配置项目，要记住所有的项目并不容易。\n因此，审查适用于即将到来的运行的设置是非常重要的，帮助用户检查和识别潜在的问题。\n这就是所谓的 \u0026ldquo;干运行 \u0026ldquo;的能力。\n干运行日志是另一种可能非常有用的工作艺术。\n帮助系统 帮助系统不仅仅是指文件和培训。\n文件可以是代码（在日志和运行时显示）。\n你可以有一个100页的word/pdf文档，但要考虑用户如何使用这个文档。\n帮助系统还包括-h/-help、man page、错误处理、变量追踪等。\n帮助系统是一个很大的话题。我们将在下周谈论它帮助系统。\n良好实践3：保持简单，愚蠢 解耦，多即是少 我们有一些情况需要重复使用一些工具或代码，那么模块化就是一个很好的方法。\n想一想这种情况，这个库到处都在使用，有一天有一个bug被引入，导致整个系统瘫痪。\n当然，我们还有其他方法可以回滚。而在我们的方案中，可重用性确实是需要的。\n如果我控制修订版，并且对每个模块单独进行检查，会怎么样？那么，即使我想为一个特定的应用程序更新通用工具，也不会影响其他的。\n功能选项 参数或选项不应该难以理解，也不应该太多。\n如果需要很多参数，该工具可能也需要考虑使用输入配置文件。\n视觉化 CLI是首先需要的，但是GUI或可视化也是很好的选择。\n这意味着网络技术是CAD职业生涯中需要获得的一项好技能。\n","id":0,"section":"posts","summary":"在IC（集成电路）行业，CAD 是一种使硬件设计者的工作变得简单的工具。我称CAD 为工具，这就是我对硬件设计中的CAD 的定义。而让工作变得更\u0026","tags":["PM","Learning"],"title":"ASIC 硬件设计 CAD 框架的 3 个有用实践","uri":"https://icsteve.com/zh/2022/01/my_sight_of_good_cad_framework-lifengs-mac-mini/","year":"2022"},{"content":"在IC（集成电路）行业，CAD是一种使硬件设计者的生活变得简单的功能。这就是我对硬件设计中的CAD的定义。\u0026ldquo;容易 \u0026ldquo;包含不同的含义。\n 易于理解输入 易于使用功能 易于检查结果(准确和可靠)  很多人总是喜欢用苹果产品作为例子。我在这里。\n苹果有合适的技术，但不是最先进的技术。\n最先进的技术意味着更多的风险。但是，把最适合客户的优越技术放在一起，是成功的关键。\n但是，无论是否遵循以下原则，最好的解决方案永远是最适合场景的方案。\nCAD框架是为专业人士设计的 所有的硬件设计师都是行业内的专家。当我第一次加入CAD小组时，我在想如何帮助，我可以帮助专业人士什么。\n我需要找出我对CAD工具用户的价值，对我们的专业硬件设计师的价值，因为在制作芯片方面我并不比他们强。\n由于VLSI CAD实用程序的客户是专业的硬件工程师，CAD实用程序的目标是开发一套能够帮助提高准确性、生产力的工具。\n 容易获得数据 易于发送数据 易于使用数据  在一个大组织中，容易也意味着标准化。\n良好做法1：最小的惊奇 a.k.a. 最少的惊讶\n配置总是一个很好的例子来解释这个规则。\n在CAD工具中，我们可能有多种方式来配置操作。\n 其中一些是来自环境变量 有些是来自于配置文件，如（yaml，json）。 有些是来自项目钩子、默认值等。 有些是来自于移交标准 有些是来自EDA工具本身。  有时我们无法避免引入混乱。那么问题就变成了如何解决这个问题，清除混乱。\n单一真实来源(SSoT) 而在我们的配置文件中，我们可能有一个if-else语句来根据条件进行切换。\n如果学习曲线如此陡峭，就不适合新项目。他们会拒绝迁移。\n即使工程师掌握了一次实用程序，他们也会在下一个项目中再次学习。\n理想的情况是，在我们的平台上，所有的实用程序都可以从一个来源读取配置。\n但这是不实际的。硬件设计还没有达到人工智能的要求。在日常工程工作中，我们仍然需要处理大量的案例。\n所以解决方案是，我们可以将功能拆分，或者将功能逐层模块化。每一层，我们都有API，或者我们称之为配置文件，用于输入和输出。\n输入和输出在一个条目文件中被很好地定义。这个文件被称为 \u0026ldquo;Metadata\u0026rdquo;，API应该始终如一地提供 \u0026ldquo;Metadata\u0026rdquo;，而不是猜测。\n{ \u0026quot;metadata\u0026quot; : { \u0026quot;name\u0026quot; : \u0026quot;flow_config\u0026quot;, \u0026quot;user\u0026quot;: \u0026quot;icsteve\u0026quot;, \u0026quot;$rel\u0026quot;: { \u0026quot;connect\u0026quot; : \u0026quot;connect_api_1\u0026quot; } }, \u0026quot;数据集\u0026quot; : { \u0026quot;width\u0026quot; : 100, \u0026quot;高度\u0026quot; : 100 } }  在真实场景中，我们可以有更多的约束。比如，数据集必须是对象，k-v对。\n我们不把这个规则理解为一个单一的文件，而是带来了元数据的概念，它代表了 \u0026ldquo;单一来源\u0026rdquo;。\n而在元数据中，我们还需要描述每个元数据键之间的关系。这也可以是元数据的一部分。\n关系（$rel）是某些业务需求的逻辑，所以需要产品SPEC来描述如何使用和解释关系。\n无歧义 在编写需求/模式或配置时，\u0026ldquo;毫不含糊 \u0026ldquo;总是被谈及。\n有些配置使用on|off或1|0就很好，那么我们应该保持简单。\n有时1或0是不知道要做什么的，所以我们可能需要精确地使用这个词。\n在定义模式或设计配置时，最好是把它发给不同的人审阅。 如果有任何问题进入你的邮箱，那说明这个设置不够清楚，会发生什么。\n###约定与配置\n我更喜欢明确的配置，而不是惯例。\n但惯例（默认命名）可以使配置变得相当简单。\n良好做法2：引导而不是指责 当用户提出使用问题，或者他们滥用一些选项时。\n你是否只是回答。\u0026ldquo;请阅读文档！！！\u0026rdquo;\n不！不！! 不!!!\n大多数用户都是使用EDA（电子设计自动化）工具的资深用户。\n如果用户不清楚，那就意味着__目前的实用设计理念很糟糕！__。\n我总是建议新来的CAD人员参加几个项目的tapeout。然后我们就可以得到我们的客户所面临的真实场景。\n当然，软件和硬件有相同的基础。但是，仍然有一些DDD（领域驱动设计）的差异。\n实例和模板 提供足够的模板和例子，使用户尽可能快地进入。\n模板是必不可少的。用户能够从模板（菜谱）开始，这些模板是经过CAD开发人员测试的。\n为了教育用户，我们应该怎么做？\nHowTo 开发一个培训材料，帮助用户建立知识。\nWhatNext 当一个错误发生时，尝试给出。\n 发生了什么，错误信息，错误代码，等等。 错误代码的位置，如果可能的话突出显示 给出建议，下一步是什么  Dryrun 我们有数以千计的配置项目，要记住所有的项目并不容易。\n因此，审查适用于即将到来的运行的设置是非常重要的，帮助用户检查和识别潜在的问题。\n这就是所谓的 \u0026ldquo;干运行 \u0026ldquo;的能力。\n干运行日志是另一种可能非常有用的工作艺术。\n帮助系统 帮助系统不仅仅是指文件和培训。\n文件可以是代码（在日志和运行时显示）。\n你可以有一个100页的word/pdf文档，但要考虑用户如何使用这个文档。\n帮助系统还包括-h/-help、man page、错误处理、变量追踪等。\n帮助系统是一个很大的话题。我们将在下周谈论它帮助系统。\n良好实践3：保持简单，愚蠢 解耦，多即是少 我们有一些情况需要重复使用一些工具或代码，那么模块化就是一个很好的方法。\n想一想这种情况，这个库到处都在使用，有一天有一个bug被引入，导致整个系统瘫痪。\n当然，我们还有其他方法可以回滚。而在我们的方案中，可重用性确实是需要的。\n如果我控制修订版，并且对每个模块单独进行检查，会怎么样？那么，即使我想为一个特定的应用程序更新通用工具，也不会影响其他的。\n功能选项 参数或选项不应该难以理解，也不应该太多。\n如果需要很多参数，该工具可能也需要考虑使用输入配置文件。\n视觉化 CLI是首先需要的，但是GUI或可视化也是很好的选择。\n这意味着网络技术是CAD职业生涯中需要获得的一项好技能。\n","id":1,"section":"posts","summary":"在IC（集成电路）行业，CAD是一种使硬件设计者的生活变得简单的功能。这就是我对硬件设计中的CAD的定义。\u0026ldquo;容易 \u0026ldquo;包","tags":["PM","Learning"],"title":"ASIC 硬件设计 CAD 框架的 3 个有用实践","uri":"https://icsteve.com/zh/2022/01/my_sight_of_good_cad_framework/","year":"2022"},{"content":"在 Google 的 \u0026ldquo;项目管理\u0026rdquo; 课程中，其中一个重要的主题是 \u0026ldquo;沟通计划\u0026rdquo;。\n当使用 \u0026ldquo;沟通计划\u0026rdquo; 这个词的时候，我觉得它可以很清楚地告诉我，应该做什么来销售我地产品，与用户建立更好的联系，同时也与在开发人员建立关系。\n 沟通计划可以帮助你澄清产品发布或新举措的目的，并正式确定你要传递给目标受众的信息。\n 在我的 CAD 日常工作中，很重要的一部分工作是与用户，其他开发人员进行交流，支持他们的想法。这些交流包括但不限于以下一些内容\n 周会 收集反馈意见 文档 等  其中有些是由用户驱动的，有些是由产品团队驱动的。我从来没有想过，我可以把它们分组，并把所有这些活动称为 \u0026ldquo;沟通计划\u0026rdquo;。\n准备 \u0026ldquo;Communication Plan\u0026rdquo; 在准备计划时，一直要问自己这些问题。\n 你为什么要进行沟通？ (你的目的是什么？) 你想与谁沟通？ (谁是你的听众？) 你想沟通什么？ (你的信息是什么？) 你想如何沟通？ (你将使用什么沟通渠道？) 你应该与谁联系，以及你应该如何使用这些渠道？ (你将如何传播你的信息？)  一旦这些问题得到回答，我们就会对 CAD 产品的沟通有一个更好的了解。\n首先，在项目实施过程中，项目经理需要与开发人员进行沟通，以确保项目的正常进行。比如检查Milestone，促成合作，解决问题，等等。\n第二，让关键用户参与进来，收集反馈，了解新CAD产品的使用难度。\n第三，考虑文档的问题，不仅要为最终用户考虑，也要为开发社区考虑。\n最后，为即将推出的新产品或现有产品的后续修改与上级管理层沟通。\n\u0026ldquo;Communication Plan\u0026rdquo; 文档化 像项目中的所有其他计划一样，\u0026ldquo;沟通计划 \u0026ldquo;需要被清楚地记录下来，并对项目成员和用户透明。\n这里有一个表格，可以让我们轻松地逐一查看关键项目，然后放入文件中。\n   Description Frequency Channel Audience Owner Status     Kick off meeting One time Zoom + Meeting-Room All internal stakeholders and project team members Project Manager@PM Planned   Status updates Weekly Zoom + Meeting-Room All project team members Project Manager@PM Planned   Milestone and deliverable updates Monthly Zoom All project team members, stakeholders optional Project Manager@PM Planned   Project stand-up (check-in) Daily Slack Project team Project Team Planned   Weekly User Synch-up Weekly Zoom + Meeting-Room Customers and project team Customers and Project Team Planned    使用二维码添加日历 这里有一个在线工具可以生成二维码图像，可以帮助添加到手机日历中。\nQRickit for calendar generation\n使用 iphone 扫描并添加到日历中。\n使用 python 生成 ics 文件 这个python脚本的目标是为一个项目生成不同种类的会议场所。\n 项目启动会议 追踪项目状态的每周会议 里程碑审查会议 解决冲突和问题的会议 项目总结会议  # Install iCalendar pip install icalendar # Run the function python create_ics.py # Test example.ics # Double click example.ics  #!env python3 from icalendar import Calendar, Event, vCalAddress, vText import pytz from datetime import datetime import os from pathlib import Path # Creating icalendar/event event = Event() event.add('summary', 'Python meeting about calendaring') event.add('dtstart', datetime(2021, 1, 12, 8, 0, 0, tzinfo=pytz.utc)) event.add('dtend', datetime(2021, 1, 12, 10, 0, 0, tzinfo=pytz.utc)) event.add('dtstamp', datetime(2021, 1, 12, 0, 10, 0, tzinfo=pytz.utc)) # Adding Organizer organizer = vCalAddress('MAILTO:organizer@example.com') organizer.params['cn'] = vText('Organizer') organizer.params['role'] = vText('CHAIR') event['organizer'] = organizer # Adding attendee attendee = vCalAddress('MAILTO:foobar@example.com') attendee.params['cn'] = vText('Foo Bar') attendee.params['ROLE'] = vText('REQ-PARTICIPANT') event.add('attendee', attendee, encode=0) # Adding location event['location'] = vText('Zoom Link') # Adding events to calendar cal = Calendar() cal.add_component(event) directory = str(Path(__file__).parent.parent) + \u0026quot;/\u0026quot; # print(directory) f = open(os.path.join(directory, 'example.ics'), 'wb') f.write(cal.to_ical()) f.close() # vim: ft=python ","id":2,"section":"posts","summary":"\u003cp\u003e在 Google 的 \u0026ldquo;项目管理\u0026rdquo; 课程中，其中一个重要的主题是 \u0026ldquo;沟通计划\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e当使用 \u0026ldquo;沟通计划\u0026rdquo; 这个词的时候，我觉得它可以很清楚地告诉我，应该做什么来销售我地产品，与用户建立更好的联系，同时也与在开发人员建立关系。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e沟通计划可以帮助你澄清产品发布或新举措的目的，并正式确定你要传递给目标受众的信息。\u003c/p\u003e\n\u003c/blockquote\u003e","tags":["PM","Learning"],"title":"何为 \"Communication Plan\"","uri":"https://icsteve.com/zh/2022/01/communication_plan/","year":"2022"},{"content":"这是一个用来演示“项目管理”过程的一个项目，也是迄今为止完成度最高的一个项目，Tcl/Csh/Cli 都是很通用的东西，利益争议 比较少。\n我将通过几个月的时间建立一个课程来完成这个项目。项目名称是 \u0026ldquo;用tcl 和csh 建立CLI\u0026rdquo;。\n该项目将在课程中分成几个部分，讲述一些关键技术和项目管理技巧。\n项目初始化 第一个问题，这个项目是如何产生的？\n通常，对于一个应用程序，我们有图形用户界面(GUI) 和命令用户界面(CLI)。\n在EDA 行业，tcl 仍然是一种非常重要的胶合语言。我写了一篇文章来分享一些想法，为什么tcl 是EDA 行业的合适选择。\n现在，python 越来越流行，使用python 作为主要的界面语言是可能的，但不是一两年的任务。\nTcl仍然是VLSI行业的主要语言。\n意图 Tcl 非常灵活，而且太灵活了，不能出错。我们需要一个框架来约束某些使用模式。这就是 \u0026ldquo;tcl-csh-cli\u0026rdquo; 项目的倡议。\n准备Kick-off 会议  检查会议是否打算让所有的开发者参与，或者只是一些关键的利益相关者和开发者。确保你能在会议上得到更多良好的支持。 决定将使用什么协作工具，如Jira、Asana、Focalboard等。 起草时间表和里程碑  Kick-off 会议记录  日期：11/24/2021 出席者: Steve, Jane, Peter 主题: \u0026ldquo;tcl-csh-cli\u0026rdquo; 启动会议   这个项目会长期存在吗？ 也许不会，这更像是一个演示项目，如果我们找到一个好的途径，我们可以继续维护它。而且通常对于CAD 框架已经有很多商业解决方案。 资源规划： 我将创建几个虚拟角色来讲述一些开发故事（Jane and Peter)，并展示不同的团队或不同的人如何相互合作的案例。 我们需要GUI 吗？ 是的，我们需要，但必须建立在CLI 之上，而且优先级很低。 什么是成本和利润？ 时间是这个项目的主要成本，利润是交朋友，为支持和销售插件挣钱。 定义交付： 为开发者开发流程的框架。 时间表和里程碑： 整个项目分为三个阶段，一个是基本功能，另外两个是高级功能。 收集用户反馈： 预留一些会议来收集用户的反馈。  技术相关  源代码管理 https://github.com/xoit/tcl-csh-cli  tclsh expert  Jane   csh expert  Peter     Git Usage training User requirement document User feedback document Technology SPEC  ","id":3,"section":"posts","summary":"这是一个用来演示“项目管理”过程的一个项目，也是迄今为止完成度最高的一个项目，Tcl/Csh/Cli 都是很通用的东西，利益争议 比较少。 我将通","tags":["CLI","Tcl","Csh","PM"],"title":"tcl-csh-cli 立项","uri":"https://icsteve.com/zh/2021/11/tcl_csh_cli_1/","year":"2021"},{"content":"最近，我在Coursera 开始学习 Google 项目管理课程。\n我发现这很有趣，因为通常我们有一些基本的项目管理知识，如何管理一个小团队，以及如何管理运作一个简单的项目。\n例如，计划一次长途旅行，升级自家的车库，等等。\n在完成了第一个课程后，我发现这个课程真的可以帮助纠正一些我的做事心态，并改善如何与他人沟通的方式。\n项目管理有必要吗？ 直到去年，我负责一些项目发布的工作，我越来越意识到项目管理真的很重要。一个项目真的需要一个好的计划，而且在主要工作完成后，还要做一些后续工作，等等。\n我们组每隔几个月就有一次发布，最初的几个版本没有太大的问题，因为我们的客户较少，不需要很多的支持。\n谷歌的在线课程 \u0026ldquo;项目管理基础 \u0026ldquo;介绍了什么是项目管理，什么是项目经理，以及项目经理在不同组织中的角色是什么。\n在我的公司中，一些高级管理人员会扮演项目经理的角色，从计划项目到与团队和领导沟通。\n由于我被提升到一个新的角色，我开始管理一些任务，并保持对这些任务的追踪。\n第一课：\u0026ldquo;项目管理基础\u0026rdquo; 在完成第一个课程之后，我总结了一些问题来自问自答。\n项目经理在我的团队中的作用是什么？ 如果我们的团队将雇用一个项目经理，这些在课程中讨论的技能如何帮助我们的团队。基本上，在任务分配给团队成员之前，我们可以让项目经理初始化项目并跟踪项目的进展。\n我们的工作是为其他团队提供服务，而承诺是非常重要的。所以有一个项目经理会很有帮助。事实上，我们有几个项目经理，但他们只是专注于更高层次的东西。\n###如果我是项目经理怎么办\n如果我是一个项目经理，我想展示我的影响力，使项目。\n如何使我的个人技能更加专业 大多数人已经有一些项目管理技能或如何管理一个项目的意识。\n只是这些技能有时是个人能力，有更好的方法，我们可以学习和调整我们的个人技能，成为专业能力。\n项目管理的生命周期和方法论  将项目分成不同的阶段 “结束项目”是很重要的 敏捷式 瀑布式 精益和六西格玛  作为一个领导或经理，工具是必要的。\n 掌握Excel 电子邮件写作 Todo列表 问题跟踪工具，如Jira 以图表为基础来表达数据 Python AHK 等等  ","id":4,"section":"posts","summary":"最近，我在Coursera 开始学习 Google 项目管理课程。 我发现这很有趣，因为通常我们有一些基本的项目管理知识，如何管理一个小团队，以及如何管理运作","tags":["PM","Learning"],"title":"Project Management 课程笔记","uri":"https://icsteve.com/zh/2021/11/project_management_1/","year":"2021"},{"content":"ICSteve 知识星球 半月会 (Half Moon Collection)，欢迎关注ICSteve 知识星球 （https://t.zsxq.com/eqr72RB），分类精简为两类，第一类是实实在在的工具和技能分享，第二类是经过我的个人思维加工的观点。\nCAD | 工技  如何把当前vim 寄存器的内容存下来以便写成script 呢？  ,qp \u0026lt;leader\u0026gt;\u0026lt;register name\u0026gt;p  一个vim 插件的集合网站，如果你是vim 用户的话，有空可以随便浏览浏览。   Vim Awesome  Vim 中需要搜索匹配多个Pattern，用\\ escape | 就可以了。  :norm /Pattern1\\|Pattern2  Python 多用于设计前端，最近有空开始关注python + VLSI 了，不知道有没有人在用这个呢？   MyHDL  direnv 是一个可以切换work env的工具，使用很方便，很多编程语言都有自己的工具，比如python 有conda。   direnv – unclutter your .profile | direnv Conda — conda 4.9.2.post24 e37cf84a documentation   有很多商业的工具可以辅助你来设计约束，检查约束，比较约束，产品我就不一一列举了。 我要说的是，如果作为CAD，可以去玩一玩 sdcparser。\n  IP 管理：很多时候，如果你是前端后端的module designer, 当你开始工作的时候，std library，ip library 等已经ready，所有需要的view 都是ready to use。CAD 的工作之一就是管理这些IP 和产生整个ASIC 流程需要的views，并确保tapeout 的时候各个IP 都是legal 的。\n  当你run EDA job的时候，屏幕scrolling fast，或许你已经知道，可以使用\u0026quot;Ctrl+s\u0026rdquo; 来freeze a terminal window，需要恢复时\u0026quot;Ctrl+q\u0026rdquo;\n  你平时用哪种\u0026quot;命名方式\u0026quot;比较多？\n   Camel Case (ex: aprVar, aprProc, aprPackage). Pascal Case (ex: AprVar, AprProc, AprPackage). Underscores (ex: apr_var, apr_proc, apr_package).   平时工作中查看搜索屏幕上Terminal 的stdout log，用得比较多的应该是tee 和直接看eda 的log file。tmux 可以直接搜索，进入copy-mode，先按ctrl-b 然后[ ，如果是vi key binding，可以用/或者?，向下或向上，如果是emacs key binding，则用其相应的快捷键。\n  有很多可以生成文档的工具，现在很多小工具都支持Markdown，如果你也喜欢用Markdown 来写技术文档，试试\u0026quot;docsify\u0026rdquo;：\n   docsify  很久前在逛Reddit 的时候发现这个，这个其实很有用，可以作为一个CAD 的学习实践例子。   EDAV | Online EDA Viewer   有时候Unix X desktop 上有一个窗口无响应，ps or top出来可能有其他太多类似的program，比如很多terminals，这时可以运行\u0026quot;xkill\u0026rdquo; 并用鼠标点选无响应窗口。\n  作为一个CAD，开发公司的，团队的流程，开发一些Utilities，Program，Platform，版本管理很重要，很多公司都用git，由公司IT 维护，或者商业的工具交钱得到技术支持。作为CAD，对版本管理一定要有强烈的感知，维护好自己的每一次check-in，熟练使用git 来管理你的流程脚本，可以试试\u0026quot;gogs\u0026rdquo;，这个是我一开始给自己用的，练习如何去管理一个大型的代码版本管理，解决依赖关系，并写一些脚本辅助release 等等。\n   Gogs: A painless self-hosted Git service  有时候你要把几个命令组合起来用，有几种方法，tcl 是一个不错的glue language，或者其他脚本语言，也都方便不需要编译，还有一个选择是直接用 csh 的alias command，其他shell 类似的。重点来了，可以使用 \u0026ldquo;!*\u0026quot;，\u0026quot;!:\u0026quot;来access 命令参数。  alias mycmd \u0026quot;echo \\!* ;\\\\ echo this is a long command \\!:1 ; \\\\ echo this is a very long command \\!:2 ;\u0026quot;   如果，你对数据库不是那么熟悉，又苦于入门有点困难，在编写script 又想使用数据库，或者数据集：解决万事开头难的问题，使用“csv“，并慢慢深入了解，这个也是一个不止好而已，是非常好的一个数据集格式，在某种情况下而且是首选。\n  很多时候我们使用\u0026quot;tee\u0026rdquo; 命令来写出screen log，多个命令是不是要用多个tee 然后再cat 在一起呢？非也，tee 也有append 功能，使用 \u0026ldquo;tee -a\u0026rdquo;。\n  很多时候写cshell script 要用 pipe + tee，很随手就是\u0026rdquo;./foo | tee foo.log\u0026rdquo;，这个只写出 stdout，而没有 srderr，需要debug 的时候错误信息在foo.log 中没有，应该随手写成这样\n  ./foo 2\u0026gt;\u0026amp;1 | tee foo.log Or ./foo |\u0026amp; tee foo.log  CAD | 观点 1. 做IC 还是转CS 做IC 还是转CS，这个命题每年都会被提起，因为每年都有同学面临这样的选择。IC 是不是夕阳产业，这个要分着讲，从设计实现是的，从应用，集成角度就不一定，换句话说好比苹果公司，制作一部手机所有的技术都是成熟的，但苹果每年都能，也都要做出不一样来。如果你对IC 感兴趣，IC 还是有得做的，只要这个行业不消失，还是有人力需求的；说到CS 是不是更有前途，我个人的观点是的，信息时代最大的行业可能就是软件行业了，可是注意，任何行业职位都有底层和顶层，CS 如此，IC 也不例外。\n2. 学习Tcl 的又一个原因 一个学习tcl 的动力: 很多脚本语言都支持tk GUI 编程，所以学会tcl/tk，你就学会了一门GUI 语言，外加tcl 几乎是IC 的最重要Interface 语言。\n3. 版权意识 看到好多好的分享，但是每次看到一些东西，我的第一个问题确是，这个可以用以传播吗？作为自己的笔记可能没有问题，我放弃了一些专业知识上分享的切入点，转而分享普识，我看到的很多文章分享是没有问题的，只不过需要注意一下：今天你如何保护他人的知识产权，明天他人也会尊重你的知识产权。\n4. CAD 技能树之PDK CAD 技能树：掌握PDK 的结构以及每个文件的作用，并熟悉各个文件如何使用。\n作为CAD 工程师，很多时候都是在和数据打交道，其中之一就是foundry 提供的PDK，全称Process Design Kit，是对特定半导体制造工艺的建模，利用PDK 中提供的模型，加上买的EDA，可以进行芯片的设计，包括但不限于：technology file, design rule, spice\u0026hellip; 不仅有学术界免费的PDK，也有Google 开源的pdk，学习CAD 又多了一条路。CAD 技能树：掌握PDK 的结构以及每个文件的作用，并熟悉各个文件如何使用。\n5. Timing Uncertainty （1 \u0026amp; 2） 提问：芯片设计约束中设置timing uncertainty 的目的是什么？如何设置？ 回答：在我刚接触约束的时候，我是做Logical Synthesis 和STA 的，那时还是65nm，约束不是那么复杂，经验值就好了，我给老师提过这个类似的问题，回答总是\u0026quot;经验\u0026rdquo;，那经验是怎么来的呢？接触越来越多后，从STA，APR 到CAD，我的想法在变化。\n综述，uncertainty 设置顾名思义就是用来cover 整个流程中出现的uncertainty，不同阶段需要考虑的uncertainty 不同，一般是为downstream work 预留时序空间。\n我们从后往前举例，先举STA timing signoff 设置来自于foundry 的工艺不确定性，一般是工艺厂商对于工艺生产线做调试的时候得出的，比如ocv。还包括不同产品实测回来的一些经验，产品对良率，DFT 测试，工作环境，aging 等一系列产品自身的考虑。\n当然STA 还有不少其他的因素可能影响uncertainty 设置，比如STA 的精确性，PBA vs GBA，给SI 或者transition 预留的余量等。\n接下来说说Routing，越往前的步骤所需要的uncertainty 需要包含后续步骤的值加上自己本步骤需要考虑的一些问题，routing 的uncertainty 主要cover global routing 与 real routing 之间的gap，EDA 工具在不断提高virtual routing 精度以及缩小其与real routing 之间的差距。具体来说就比较多了（不考虑detour 或者congestion 等问题触发的大delay），举一个偏一点的例子，由于routing 后对path delay 影响比较virtual 的会有变长或者变短，加上ocv，这个值在几个iteration 里是可以估计出来的，经验值之一。\n未完待续\n6. 对知识要能『指手画脚』 最近发现某些CAD 工程师对资源的理解不开阔，大多时候人的资源要远盛过硬件资源，除了会找到正确的人，之前至少要对自己相关工作的上下游一级dependency 要达到使用（use）的级别，我看到很多人只停留在知道（know）的级别，背后的原因是用了你才能更好地提问与交流。\n从CAD 的工作来说，我觉着在familiar（熟悉）和 master（掌握）之前还有一个可以去深入的技能guide（指导），这里的指导并不是要去指手画脚，而是你知道他应该是什么样子，一种对预期的把控，更深入些，如果有错了，你可以知道什么原因导致的。\n7. IC 的最基础知识之我见 之前我提了一个互动问题，大家觉得IC 无论是前端，后端，还是CAD，最主要的基本技能是什么？ 我的答案是Timing。我觉得timing 是基础，因为在我看来它是实现功能最基本基本的东西，也是硬件区别软件开发的一个坎，围绕timing 的知识很多。我打个比喻，要实现IC 知识的温饱，Timing 要懂，然后小康可以看看Power 啥的，富裕就要另外一个方法论了，High Performance，Low Power等。\n8. GameStop 的大戏 GameStop 的大戏很精彩，社交媒体的力量在不断的放大，在某些上层经济利益既得者书写的规则下产生出了反噬。你的投资也可以用上CAD 来做些简单的分析和追踪。\n","id":5,"section":"posts","summary":"ICSteve 知识星球 半月会 (Half Moon Collection)，欢迎关注ICSteve 知识星球 （https://t.zsxq.com/eqr72RB），分类精简","tags":null,"title":"ICSteve 半月会（2021.01-下）","uri":"https://icsteve.com/zh/2021/01/icsteve_hmc_2020_01_b/","year":"2021"},{"content":"ICSteve 知识星球 半月会 (HMC - Half Moon Collection)，欢迎关注ICSteve 知识星球 （https://t.zsxq.com/eqr72RB）。半月会每半个月总结星球中的推送集合成册，一个月两期。加入星球可以看到更多互动讨论，向星主提问，以及获得实际的实践分享和点评。\nCAD | 工技  开始使用Notion，分享使用Notion的一些技巧以及自建一些模板。写了第一篇分享：利用Notion 收集想法 Hugo 构建的网站 http://icsteve.com 将现有模板改造成双语支持。 立项cshinate，准备构建一个cshell 最佳实践集合。连载第一，第二篇：Csh 选项 使用tree 命令展示文件结构 Vim 可以使用 q 来录制 macro 到 register，然后使用@ 来调用寄存器中的内容。之后会发一个分享，在IC 工作环境中高效使用 Vim 与Macro。#博文计划 想想Server 工作中你一天需要输入多少次密码，或者多少次其他固定的code？如果超过0次，了解下expect，tcl 的一个处理交互的库。 终端或者shell 脚本里如何打印或者处理json？当属使用工具jq，用处不仅仅在于显示json，更多的是如何把json 作为一个数据源用jq 粘合起来，正在做的cshinate （csh 的最佳实践集合）对口json 的工具就是jq，赋能json 就需要把jq 用得恰到好处。 有些sh 脚本包含敏感信息，需要加密，专门的工具门槛太高？试试 gzexe，可防君子，不防小人。 周期性的工作可以交给Crontab 来做，如果没有建crontab 的权限呢，tmux 和 while 配合run 一个常驻系统的脚本。为了防止被系统kill，也许需要设置定时重启。 原来git 也可以设置内部的alias，主要是利用了\u0026quot;git config \u0026ndash;global alia\u0026rdquo;，有一定用处，但是我觉得是不如shell 的alias 来得灵活哦，比如alias gitci \u0026ldquo;git add . ; git commit -am !* ; git push\u0026rdquo;。 有时候要做测试，有时候要想从一个terminal 控制另一个terminal，怎么实现呢，开始使用tmux 吧，Tmux 还可以做同屏演示。 手动输入zoom meeting ID and Password 太费时间，这个小工具可以生成电脑端和移动端的URL，省不少时间有没有😉 https://www.skyzh.dev/zoom-url-generator/ 平时用grep 可能不怎么带参数，其实很多参数是很好用的，比如  n 显示行号 -A 5 显示上下文，after 5 lines -B 5 显示上下文，before 5 lines -C 5 显示上下文，both before and after 5 lines    CAD | 积累  Google Open Source PDK: https://github.com/google/skywater-pdk Know the format TOML: https://github.com/toml-lang/toml https://www.maxar.com/ 公司和他们的产品了解下。未来是属于数据驱动的，CAD 是数据驱动的Interface。 开源综合工具 https://github.com/YosysHQ/yosys 开源时序分析工具 https://github.com/OpenTimer/OpenTimer 这个网站应该是ASIC 设计前端同学很了解的一个网站吧，准备刷刷这个网站，我也想建一个数字后端实现和CAD 的类似网站。 http://hdlbits.01xz.net  CAD | 进阶 1. 如何对工具“假装”了如指掌 多看几遍Datasheet，Command Reference 以及创建自己的Test Case，多实践，你就是一本活的工具手册，东西看多了，你的境界会由质变提升的，敢不敢坚持试试？\n2. 流畅的远程演示Tips 现在远程办公，远程会议频次越来越高，当你在显示PPT 或者proposal 的时候，怎么看起来流畅呢？\n 调整颜色，以浅色背景（白色或浅绿色），调整xterm 为浅绿色背景，黑色文字 调整字体大小，现在高分屏越来越普遍，保证有比较大的字体，即使在网络不佳时也不会有太大影响 删除动画，如果不是marketing 相关的 presentation 打开文件默认显示行号，方便交流 文件的字体大小我要放大相比平时自己工作 善用 tmux 管理terminal 窗口 善用 tree 等命令展示文件结构 善用meld，tkdiff，gitdiff 等工具比较文件  3. 讨论可以活跃思维 大家觉得在数字芯片设计中，各个分领域，比较基础的技能是什么，无论是数字前端，数字后端还是CAD？\nCAD | 观点 1. CAD 与加班 加班的在任何行业都存在，建筑工人几天内造出医院，软件Release 阶段的加班，硬件Tapeout 最后要冲刺。 如果事情可以并行，是不是就不需要加班了？并非如此，事情并行后，同样的目标消耗的资源成本提高了，在某种条件下（加班），成本最低。 ICCAD 的目标是提高效率，某些情况下有了CAD的帮助，摸摸鱼，降低自己的工作强度。 ICCAD 还有一个好处在于CAD 可以涉猎更多的领域，强化自己的护城河，增强自己的不可或缺性。\n2. 使用API 是CAD 基本功 无论什么框架，什么系统都变得越来越封闭，像Android这种开源的系统，用户得到的是百花，每种花都有好有坏。 那CAD 可以应对什么呢？数据接口将会越来越开放，访问数据的能力也是CAD的一个基本功。\n3. ICSteve 要分享什么 单纯讲CAD 和IC 的总结知识，也可有很多分享与输出。 做了多年的CAD 后我发现有几类能力是可以显著提高designer的工作效率和体验。\n开发环境的持续优化 基础知识的模块化，实例化，数据化，工具化\nknowledge is a treasure but practice is the key\n4. CAD 与软件开发 做软件和做CAD 有些许不同，CAD 从硬件角度出发，兼顾项目管理，正确处理workaround 或tradoff等，如果想对CAD 进一步，我的建议是同时做向上管理和向下管理，向上走通架构和参与管理层面的CAD 决策，向下了解硬件项目的组织架构和瓶颈，提供解决方案。\n5. 芯片设计上云 关键就是一个\u0026quot;省\u0026quot;字，要么省时间，缩短Time to Market，要么省成本，减少peak usage带来的成本增加。上云以后数据的使用权，你的设计是否会成为被学习的样本等问题都需要考虑。上云了也许有些岗位会被缩减，也有一些岗位会新增，比如云数据的交互(学习些容器技术，网络技术总有溢处)。\n","id":6,"section":"posts","summary":"ICSteve 知识星球 半月会 (HMC - Half Moon Collection)，欢迎关注ICSteve 知识星球 （https://t.zsxq.com/eqr72RB）。半月","tags":null,"title":"ICSteve 半月会（2021.01-汇上）","uri":"https://icsteve.com/zh/2021/01/icsteve_hmc_2020_01_a/","year":"2021"},{"content":"tree 是用来帮助我们显示目录和文件结构的一个常用命令。\nReal Case 实例 当我们讨论某项方案，或者要和其他同事debug 一些问题的时候，难免需要展示文件夹结构，尤其是在通过视频会议来分享这些内容的时候，口头描述成为一个挑战，不仅表达不一定准确，而且会来回得确认，不断地回溯。那怎样才能清晰地表述文件结构呢？\n. 代表了当前文件夹，我们可以使用pwd 来代替它\n➜ tree -a --dirsfirst . ├── test -\u0026gt; test_3 ├── test_1 │ └── file_1 ├── test_2 │ └── file_2 ├── test_3 │ └── file_3 └── .conf 4 directories, 4 files ➜ tree `pwd` -a --dirsfirst /Users/steve/demo ├── test -\u0026gt; test_3 ├── test_1 │ └── file_1 ├── test_2 │ └── file_2 ├── test_3 │ └── file_3 └── .conf 4 directories, 4 files  Understand 理解 运行 tree —help 来查看tree 命令的帮助信息，如果忘记某些选项的意思的话。\n➜ ~ tree --help usage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ] [-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version] [--help] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst] [--charset charset] [--filelimit[=]#] [--si] [--timefmt[=]\u0026lt;f\u0026gt;] [--sort[=]\u0026lt;name\u0026gt;] [--matchdirs] [--ignore-case] [--fromfile] [--] [\u0026lt;directory list\u0026gt;] ------- Listing options ------- -a All files are listed. -d List directories only. -l Follow symbolic links like directories. -f Print the full path prefix for each file. -x Stay on current filesystem only. -L level Descend only level directories deep. -R Rerun tree when max dir level reached. -P pattern List only those files that match the pattern given. -I pattern Do not list files that match the given pattern. --ignore-case Ignore case when pattern matching. --matchdirs Include directory names in -P pattern matching. --noreport Turn off file/directory count at end of tree listing. --charset X Use charset X for terminal/HTML and indentation line output. --filelimit # Do not descend dirs with more than # files in them. --timefmt \u0026lt;f\u0026gt; Print and format time according to the format \u0026lt;f\u0026gt;. -o filename Output to file instead of stdout. ------- File options ------- -q Print non-printable characters as '?'. -N Print non-printable characters as is. -Q Quote filenames with double quotes. -p Print the protections for each file. -u Displays file owner or UID number. -g Displays file group owner or GID number. -s Print the size in bytes of each file. -h Print the size in a more human readable way. --si Like -h, but use in SI units (powers of 1000). -D Print the date of last modification or (-c) status change. -F Appends '/', '=', '*', '@', '|' or '\u0026gt;' as per ls -F. --inodes Print inode number of each file. --device Print device ID number to which each file belongs. ------- Sorting options ------- -v Sort files alphanumerically by version. -t Sort files by last modification time. -c Sort files by last status change time. -U Leave files unsorted. -r Reverse the order of the sort. --dirsfirst List directories before files (-U disables). --sort X Select sort: name,version,size,mtime,ctime. ------- Graphics options ------- -i Don't print indentation lines. -A Print ANSI lines graphic indentation lines. -S Print with CP437 (console) graphics indentation lines. -n Turn colorization off always (-C overrides). -C Turn colorization on always. ------- XML/HTML/JSON options ------- -X Prints out an XML representation of the tree. -J Prints out an JSON representation of the tree. -H baseHREF Prints out HTML format with baseHREF as top directory. -T string Replace the default HTML title and H1 header with string. --nolinks Turn off hyperlinks in HTML output. ------- Input options ------- --fromfile Reads paths from files (.=stdin) ------- Miscellaneous options ------- --version Print version and exit. --help Print usage and this help message and exit. -- Options processing terminator.  我挑了几个自己特别常用的来讲讲每一个选项的使用场景。可以看到很多选项和ls 命令是很类似的。\n-a, 罗列所有的文件，包括隐藏文件。在一些CAD 或者其他工作中，需要debug 的时候，或者需要展示一些隐藏的配置文件的时候，由于文件以 \u0026ldquo;.\u0026rdquo; 开头为隐藏文件，所以需要使用 -a 。\n-d, 仅罗列文件夹，忽略文件。在某些情况下，文件很多但是我们并不关心，我们关心的是文件夹结构，文件很有可能是临时文件，按日期生产的。在这种情况下，只列出文件夹会清晰很多。\n-L, 用来控制文件夹的层数。某些时候文件夹很深，文件夹内套文件夹，直接用tree 会让输出到stdout 的结果很长。这个时候如果我们只想显示两层结构，可以使用 -L 2.\n-t, 按修改时间排列文件。常用于需要展示最新生成的文件，使用这个选项就可以清晰的在tree view 的末尾找到最新被修改过的文件了。\n另外一个好用的功能是HTML 和JSON 格式的输出。现在的HTML 文档越来越流行，html 或者json 输出无疑减轻了好多转换的工作，让我们可以更方便，更快速的将结果集成到web 应用中。\nImprovement or Exercises 改进或练习 尝试以下的命令，了解上面我所列出来的一些常用选项的输出结果。\n也可以自己构建不同的结构来尝试不同的选项，平时多练习，关键时刻不掉链子:)\nmkdir tree_demo cd tree_demo mkdir -p demo_1 demo_2 demo_3 demo_4 demo_5 touch demo_1/file_1 demo_2/file_2_1 demo_2/file_2_2 demo_3/file_3 demo_5/file_5 touch .demo_6 tree `pwd` tree `pwd` -a tree `pwd` -a --dirsfirst touch demo_2/file_2_2 tree `pwd` -a -t --dirsfirst tree `pwd` -a -t -L 1 --dirsfirst tree `pwd` -a -t -d -L 1 --dirsfirst  ","id":7,"section":"posts","summary":"tree 是用来帮助我们显示目录和文件结构的一个常用命令。 Real Case 实例 当我们讨论某项方案，或者要和其他同事debug 一些问题的时候，难免需要展示文件夹结","tags":["RUI","csh","tree"],"title":"使用tree 命令展示文件结构","uri":"https://icsteve.com/zh/2021/01/tree_command/","year":"2021"},{"content":"今天向大家推荐一个网站来学习英语发音。\nYouglish : https://youglish.com\n这个网站会将你搜索的单词或者词组匹配Youtube 的语音，从下面的截图可以看出我正在播放1951个视频里的第4个。\n并不像字典简单的罗列单词的单个发音，或者一两个句子，也有一些服务以公开出版物为蓝本，在其中搜索，Youtube 的优势在于，被搜索的单词出现在很多日常的，专业的内容对话中，演讲中，更好地理解上下文，解决发音和理解记忆的问题。\n特别的，对于很多难理解的专业和特定领域的单词，我们可以看到单词在特定语境下的用法。\n","id":8,"section":"posts","summary":"今天向大家推荐一个网站来学习英语发音。 Youglish : https://youglish.com 这个网站会将你搜索的单词或者词组匹配Youtube 的语音，从下面的截图可以看出我正在播放1951","tags":["english","youtube"],"title":"英语发音助手：youglish.com","uri":"https://icsteve.com/zh/2020/12/youglish/","year":"2020"},{"content":"csh 从使用者的角度来讲，并不是一个合格的shell 程序，但是在某些情况下，我们不得不使用它来完成大部分工作。作为【睿计划】的一部分，我将讲述如何使用csh 以及配合其他utilities 来提高工作效率，让work life 变得更加睿智。最终我将把所有的经验集中在一个集合里：cshnate。\nReal Case 实例 有些csh 程序，在书写的时候并没有考虑太多，导致的问题就是在某些人的环境下可以运行，而在某些人的环境下确不能运行，我们来聊聊第一种可能性，由于argument 引起的不确定性。\nUnderstand 理解 在Unix-like 系统众，当你需要获得某个utility 的帮助信息的时候，可以尝试以下两种方法，以csh 这个命令为例\n man csh csh \u0026ndash;help  ➜ ~ csh --help tcsh 6.18.01 (Astron) 2012-02-14 (x86_64-apple-darwin) options wide,nls,dl,bye,al,kan,sm,rh,color,filec -b file\tbatch mode, read and execute commands from `file' -c command\trun `command' from next argument -d\tload directory stack from `~/.cshdirs' -Dname[=value]\tdefine environment variable `name' to `value' (DomainOS only) -e\texit on any error -f\tstart faster by ignoring the start-up file -F\tuse fork() instead of vfork() when spawning (ConvexOS only) -i\tinteractive, even when input is not from a terminal -l\tact as a login shell, must be the only option specified -m\tload the start-up file, whether or not owned by effective user -n file\tno execute mode, just check syntax of the following `file' -q\taccept SIGQUIT for running under a debugger -s\tread commands from standard input -t\tread one line from standard input -v\techo commands after history substitution -V\tlike -v but including commands read from the start-up file -x\techo commands immediately before execution -X\tlike -x but including commands read from the start-up file --help\tprint this message and exit --version\tprint the version shell variable and exit See the tcsh(1) manual page for detailed information.  这里罗列出来的是csh 这个命令可以使用的flags，如果需要知道csh script 是如何接受参数的，可以参考这个页面 parameter.\n如果我们看到一个csh 脚本程序开头像这样：/usr/bin/env csh -fx, 这表示用当前环境下的csh 来运行这个脚本文件，-f 表示忽略start-up 文件.cshrc，而-x 意思是对每个命令都需要在执行前先打印出来（cshrc）。\n如果cshell 不是默认的shell，可以通过直接输入csh 来进入cshell。如果csh 未被安装，这里有个google cshell 安装的链接 - google install csh。\n下面是cshell 脚本的例子，可以从这个最简单的例子开始cshell 编程。\n#!/usr/bin/env tcsh echo \u0026quot;This is my first csh example\u0026quot; ; exit ;  保存以上内容到 demo_001.csh 并将文件给成可执行，然后尝试运行程序。\nchmod +x demo_001.csh ./demo_001.csh  脚本的首行以 #! 是调用了Linux 内核的execve 方法，表示使用特定程序运行脚本文件。\n有关 \u0026ldquo;Hash-Bang\u0026rdquo; 或者 \u0026ldquo;Shebang\u0026rdquo; 可参考这个Wiki页面 - SheBang (Unix).\nImprovement or Exercises 改进/练习  在你自己的环境下获取csh 帮助信息 检查csh 的版本信息 写以个csh 脚本，打印出 \u0026ldquo;Hello World\u0026rdquo;  Links  Google Search: csh install Wiki Page: Shebang (Unix) Knowledge Link: cshrc  ","id":9,"section":"posts","summary":"csh 从使用者的角度来讲，并不是一个合格的shell 程序，但是在某些情况下，我们不得不使用它来完成大部分工作。作为【睿计划】的一部分，我将讲述如","tags":null,"title":"Csh 选项","uri":"https://icsteve.com/zh/2020/12/csh_argument/","year":"2020"},{"content":"我尝试过很多不同的工具来组织从网络上收集到的信息以及我自己转瞬即逝的一些想法。用过的服务有raindrop.io, App List, cubox, 等。They all have their own use cases and scenarios. And Cubox can support tags, date, sort, and other more functions. Comparing to these apps, Notion is a good replacement which can serve the collection very well.\nResult This is the view for my current inbox (Table View). The links are added to the inbox by sharing function from my iPhone when I browse the technical articles or news. And they are also from my EDGE browser on MAC or PC. When I browse online for news or technical topic, or work related items, I will simply click share the link and put them to the Notion/Inbox.\nThe table in Notion is a type of database, so we can add any column we want. I added one checkbox column called \u0026ldquo;To Obsidian\u0026rdquo; (Check Notion and Obsidian), tags and create date. At the bottom, for each column, we can also define the summary for each column.\nSwitch to Gallery View\nUnderstand Now let\u0026rsquo;s try to build the Inbox page in your Notion. In the Inbox or Collection, you can put anything you want, an article link, an apple store app link, a piece of idea, a text message, and so on. This is easy to be done by just click the share button on the smart phone. Since we are building a read later database, so we can put any property we want to each item. I have uninstalled several apps in my iPhone, what about you?\nCreate a new page Click the \u0026ldquo;+\u0026rdquo; button next to the WORKSPACE or PRIVATE. And then give the new page a name, for instance, \u0026ldquo;Inbox\u0026rdquo; or \u0026ldquo;Collection\u0026rdquo;.\nAdd \u0026ldquo;Table\u0026rdquo; database Create a table for the new page\nThen you will get an empty page like this.\nCustomize Columns Now, we can define the columns in our collection table. I want to add 2 more columns, one is \u0026ldquo;To Obsidian\u0026rdquo; and another one is \u0026ldquo;Create Date\u0026rdquo;.\n\u0026ldquo;To Obsidian\u0026rdquo; is a checkbox to tell which would be going to the Obsidian, transfer the knowing to knowledge.\n\u0026ldquo;Create Date\u0026rdquo; is the date and time when each row is created. This will tell me when did I snap the article in.\nImprove Now we have the table, by install the iOS or Android Notion app, click any share button and save the content to the Notion\u0026gt;Collection. All the Notion with the same account will update the table, and then start to do the close reading, transfer the knowledge, etc.\nThe table column also has sort and filter function. Please play around the followings:\n Add a \u0026ldquo;Read\u0026rdquo; column. Once the article is read, mark it. Filter the column \u0026ldquo;Read\u0026rdquo;, only display \u0026ldquo;Unread\u0026rdquo; items. Sort by \u0026ldquo;Create Date\u0026rdquo; Try the summary of columns, show the count, date duration, etc. Add new property for the data item per the need and it will apply to all the items.  ","id":10,"section":"posts","summary":"我尝试过很多不同的工具来组织从网络上收集到的信息以及我自己转瞬即逝的一些想法。用过的服务有raindrop.io, App List, cubox, 等。They all have their own","tags":["notion","collection"],"title":"利用Notion 收集想法","uri":"https://icsteve.com/zh/2020/12/collection_to_notion_inbox/","year":"2020"},{"content":"效果预期与知识储备 我在本文中分享我的文档工作流方法，那么你可以轻松用markdown 来表达自己，高效地管理下面一些工作中常用到的文档类型。\n 产品手册 演示文档 邮件模板 代码管理 知识积累  知识储备 此内容适合所有人，无论是基础篇还是高级篇都不需要花费很大的时间精力去掌握，内容很直接，没有太难的学习曲线。\n 基础篇  Markdown Unix Environment   高级篇  Javascript HTML/CSS    个人内容组织原则  所有内容必须能用最简单的文本编辑器打开 标记方法必须要尽量使用 定期做Review 和Update，知识之间要连接 避免知识内容收集的重复 给内容分等级，优先级的等级，专业程度的等级，兴趣的等级等等  即使我养成了上述习惯，我还是会定期去过一遍list，看最近是不是有哪几项没有做。\n工具安装 WSL: Ubuntu 在Windows 环境中，推荐安装WSL。近几个月的更新，Windows 的Power Terminal，Visual Studio Code 已经可以很好地和WSL 互动了，开发的体验已经比之前好很多倍了。\nMarkdown Editor 近几年流行起来的Visual Studio Code 很好8用，安装也非常简单，https://code.visualstudio.com/ 从官网下载安装文件。\n我之前购买过收费的markdown 工具，以前markdown 并没有像标配一样被很多工具支持，但我一看见它就被它的简洁吸引了，然后我逐渐去看更多和标记语言有关的内容和积累自己的库，比如js markdown-it，php parsedown，python Python-Markdown 当然还有很多啦。\nMarkdown 语法参考\nhttps://www.markdownguide.org/basic-syntax/\nDocsify 文档的框架分为两个派，一派是写完文档需要做一次“生成”的动作，另一派是直接动态解析源文件，没有一个中间生成的过程。\n我偏向于直接解析Markdown 源文件的一派，Docsify 就是属于这一派。\nhttps://docsify.js.org/\n几乎无需安装，一个index.html 就可以完成工作，sWeb 已经将这个实例放到了template 内，包括所有的js 和css。\n 快速开始 如何设置sidebar 如何设置navbar  下面是 http://icsteve.com 使用的index.html，外加了几个有用的插件。\n toc external-script search docsify-pagination docsify-tabs docsify-example-panels emoji pdfobject docsify-pdf-embed ocsify-plugin-flexible-alerts docsify-footer-enh zoom-image  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- No \u0026lt;base target=\u0026quot;_blank\u0026quot;\u0026gt; --\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;IE=edge,chrome=1\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;icsteve.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/toc.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;shortcut icon\u0026quot; href=\u0026quot;favicon.ico\u0026quot; type=\u0026quot;image/x-icon\u0026quot;\u0026gt; \u0026lt;style\u0026gt; :root { --docsifytabs-border-color: #ededed; --docsifytabs-tab-highlight-color: purple; } h1 .anchor span { color: #f05e2f ; } .emoji { height: 0.91rem ; padding-bottom:3px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body onload=\u0026quot;WaveDrom.ProcessAll()\u0026quot;\u0026gt; \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt;Please wait...\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; window.$docsify = { basePath:\u0026quot;.\u0026quot;, search: 'auto', subMaxLevel:5, loadSidebar: true, loadNavbar: true, tabs: { persist : true, // default sync : true, // default theme : 'classic', // default tabComments: true, // default tabHeadings: true // default }, alias: { '/.*/_sidebar.md': '/sidebar.md' ,'/.*/_navbar.md': '/navbar.md' ,'/_navbar.md': '/navbar.md' ,'/_sidebar.md': '/sidebar.md' } ,footer: { copy: '\u0026lt;span\u0026gt;IC Steve \u0026amp;copy; 2019\u0026lt;/span\u0026gt;', auth: ' 转载引用请注明出处', pre: '\u0026lt;br/\u0026gt;', style: 'text-align: right;' } } if (typeof navigator.serviceWorker !== 'undefined') { navigator.serviceWorker.register('sw.js') } \u0026lt;/script\u0026gt; \u0026lt;!-- libraries --\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/docsify.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/external-script.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/search.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-pagination.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-tabs.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-example-panels.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/emoji.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/pdfobject.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-pdf-embed.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-plugin-flexible-alerts.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/docsify-footer-enh.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/docsify/4.8.3/plugins/zoom-image.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- \u0026lt;script src=\u0026quot;./vendor/docsify/4.8.3/plugins/toc.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  更多开箱即用的实例请关注ICSteve 知识星球 （收费）。\nMarp Marp 的官网：https://marpit.marp.app/\n安装Marp 的Cli 工具。\nnpm install --save-dev @marp-team/marp-cli -g marp -v   @marp-team/marp-cli v0.16.2 (w/ @marp-team/marp-core v0.15.2)\n Marpit 可以做为库使用，内部使用了markdown-it 解释markdown 文件的结构。\nMarp 可以使用theme，我制作了一个theme 以及background，很容易制作一个模板。我制作了我司的PPT 模板的Marp theme，markdown 直接生成PPT 是HTML 格式，方便更新的发布，不像固定的文件需要不断的发送PPT 文件，HTML 在浏览器里浏览，也很容易保存成PDF，Marp 本身也可以存为PDF 格式。\n更多开箱即用的实例请关注ICSteve 知识星球 （收费）。\nMjml https://mjml.io/\n由于Outlook 显示HTML 的方式就像IE 一样特殊，要很多特殊的处理方式。MJML 使用自己的标记语言来统一各个平台下的显示问题，一套语法适合桌面端客户端（Outlook 等）以及移动端各种邮件app。\n对于这个工具我并没有完全部署到我自己的环境中，只是参考它转换出来的HTML，并参考这些HTML 搭建自己的HTML 邮件模板。\n更多开箱即用的实例请关注ICSteve 知识星球 （收费）。\nAsciinema 这个工具可以帮助你录制Terminal 的一个工具，效果可以参考\nhttps://asciinema.org/\n我并没有安装，使用的是 Running from source\ngit clone https://github.com/asciinema/asciinema.git cd asciinema python3 -m asciinema --version  录制完成后，可以通过asciinema-player 来对录制的内容进行播放，可以轻松插入到docsify 文档中。\n更多开箱即用的实例请关注ICSteve 知识星球 （收费）。\nWebserver 很多内容是已经往web 方向发展了，所以我们需要假设一个本地的服务器以测试和运行很多功能，当然nodejs 本身有server 模块，为了简单和扩展，我也安装了XAMPP，而且平时也会用到nodejs 的server 以及sWeb。\nhttps://www.apachefriends.org/index.html\n工具篇总结 互联网还在初期发展阶段的时候，掌握word 和excel 是很多工作，学习的一大技能，可以让你所做的事情事半功倍，现在掌握一些Web 技能，Python 技能，Tcl 技能或者其他脚本程序，这种过程非常类似那时候的office 技能，这些基本技能也正在被逐渐加入到课堂。\n当然我们不能只停留在使用的阶段，工具越来越开放，我们使用工具的方式正在变化。\n更多开箱即用的实例请关注ICSteve 知识星球 （收费）。\n","id":11,"section":"posts","summary":"效果预期与知识储备 我在本文中分享我的文档工作流方法，那么你可以轻松用markdown 来表达自己，高效地管理下面一些工作中常用到的文档类型。 产","tags":null,"title":"我的文档工作流 （工具篇）","uri":"https://icsteve.com/zh/2020/01/document_flow/","year":"2020"},{"content":"为什么起这个标题呢？我这篇文章的参考书目是两本来自90 年代的书，而里面的概念放到无论哪个先进的Framework 里都是妥妥的黄金准则（除了Cloud 的概念）：\n 1992: Electronic CAD Frameworks 1994: CAD Frameworks: Principles and Architecture  在接下来的系列文章中，我会以这两本书为基础，结合实践中的问题，对CAD 做个系列教程，该教程的目标是让每一个工程人员都有能力去Handle CAD 相关的工作，全职兼职皆可。\n什么是CAD Framework CAD Framework 是软件层面的一种架构，提供一套通用的运行环境供EDA 和 Utilities 的使用。\n从这个层面来讲，CAD Framework 更多的偏向于软件，用于信息的管理和组织并像胶水一样把各个单独的节点粘合起来。像EDA 公司本身的工具如，Lynx 以及 Flow tool 都是对这个领域的尝试，但是它们更Foucus 在自家工具的生态中。而像ICManage 或者Cliosoft 这类公司，更多的把目光放眼在通用的Infrastructure 上，以及对Cloud 的支持。\n数据管理  IP 数据管理  IP 的管理越来越受重视，一个是因为知识产权的管理和合理使用非常重要。一个公司偶尔会有不同部门在同一时间去license 相同类型的IP 的情况，还有其他类似资源没有合理利用的场景。\nIP 的管理处理对vendor 信息的管理以为就是对具体的数据管理，不同的IP vendor 提供的数据不尽相同，命名规则各异，质量参差不齐。这就需要IP 数据管理平台对数据进行整理和清洗，对于IP 数据来说我们不能改动任何原始数据，但是我们可以进行分类，重新建立link，生成中间model等等，反正就是记住一个基本准则：不能改变原始数据，又将数据统一化管理。\n Process 数据管理  Process 的更新也是很快的，对同一个tech node，会有0.x 版本到1.x 版本的一路更新。对process 的管理目的在于能将正确的文件用于正确的工具。Foundary 提供了一整套能用于各大EDA 厂商的工具，是一个整的Package。把这个package 内的内容细分并有序组织便是Process 数据管理的价值所在。\n把数据管理起来对于comparison，tracing，debugging 都是很有帮助的。\n Design 数据管理  开始做项目了，数据的输入输出管理也是很重要的，保留这些数据并妥善管理对于项目的正确进行尤其重要。\n有些公司用的是全部打包，archive all，有些公司则用按需打包，release control。\n不管哪种方法，都是希望把设计数据版本化，方便数据的Handover，以及在数据发生意外的时候恢复数据。\n工具管理  EDA 工具 / Server 管理  EDA 工具的管理很多时候看似都是IT 的活，但是对于工具装好以后，License 的使用统计，EDA 的Runtime 统计都是关系到项目cost 的，需要和项目挂钩。而和项目挂钩的问题，最后都纳入到CAD Framework 里。\n Utilities  还有一些平时用于项目的，或者通用的脚本，如何管理和复用以增强今后的工作效率，这些都是需要靠CAD Framework 去保证的。\n流程管理 流程管理虽然在整个CAD Framework 里比重不多，但是它是工程师每天打交道的部分，设计上要充分考虑用户体验和不断做正向反馈修正。\n流程管理也是接下来会讲的重中之重，会剖析一些开源的框架，分析利弊，结合实际总结。每个框架都有自己的适用范围，并没有绝对的孰好孰坏，有些框架对于小公司太过冗余，有些对于大公司过于简单。\n流程管理要兼顾流程的划分，Team 和Team 之间的合作衔接，以及Flow 开发人员和项目的合作，还有一个重要的是后续的Support 以及用户的反馈机制。\n当然具体细节来说，比如流程开发人员怎么介入debug 项目，design 工程师怎么去workaround 既有流程满足自己的需求。\n人力管理 有人说这个是公司HR 的事情，也不全是。如果你做为一个Manager 想要了解各个环节中所花费的人力资源有多少，通过这个数据来优化项目流程，缩短开发周期。所以周报，日报系统并不是简单地汇报一下做了什么。\n自建还是购买 无论自建还是购买，都需要一定的CAD 人力资源的配置，全职的CAD 工程师或者某些设计人员的兼职CAD 角色。所以对Design Engineer 做CAD 相关的培训是很有必要的。\nReference  Electronic CAD Frameworks CAD Frameworks: Principles and Architecture  ","id":12,"section":"posts","summary":"为什么起这个标题呢？我这篇文章的参考书目是两本来自90 年代的书，而里面的概念放到无论哪个先进的Framework 里都是妥妥的黄金准则（除了C","tags":["cad","framework"],"title":"CAD 框架：来自90 年代的黄金准则","uri":"https://icsteve.com/zh/2020/01/cad_framework/","year":"2020"},{"content":"CAD Framework 的目标是让使用者忘记框架，专心于具体的IC 设计工作。\n Framework 能做的尽量让Framework 去做； Framework 不能做的，想办法让Framework 去做。  在上一篇文章中，我们谈到了CAD Framework，我总结成八个字，“数据管理，接口管理”，当然涉及到细节就会有很多了，不同的应用，不同的数据类型，不同的接口设计。\n云来了 Cloud 的兴起，让算力得到了一定的解放，让服务更容易部署，也正改变着供应商的定价模式，以及使用者的操作方式。\n既然这么多方面都在悄然变化，那CAD Framework 不可能一成不变就可以适应新的事物。\n我刚刚提到的数据管理和接口管理，“云来了”并咩有改变数据管理的方式，直接影响的是接口管理，管理好接口一切都好办了。\n接口管理变革 互联网企业，或者互联网思维在“入侵”各行各业，也包括IC 行业，很多初创企业在从互联的角度对IC 使用到的数据进行管理，并结合经典的项目管理思想，形成了一套套的项目管理，数据管理方法论。\n数据的底层还是要结合各行各业的实际情况，IC 行业有自身独有的数据特征，底层数据管理变革的周期很长，想比10年前，或者二十年前来看并没有实质性的改变。\nCAD Framework 的演进是让数据管理变得更加科学，高效。\n数据隔离 传统的IT 架构中，只要有权限就可以访问本地数据。\n云端顾名思义，数据不在本地，当然我们可以登录到云端去，比如ssh，那么其实和本地操作无差，但单纯的把机器和环境搬到远程并不能发挥云的优势。\n云的演变从按机器资源为最小颗粒到以功能，以函数的调用提供服务。\n 租用云服务器，作为本地服务器的扩展，通过组网完成数据互通 租用Runtime，比如我只需要做一个dc 的综合并且希望充分利用资源最多一晚上要出结果 租用函数，我只需要做综合里的compile_ultra，前期以及后续都在本地完成  数据传输 数据的传输逐渐成为关注的焦点，安全性与便利性一直是一对矛盾体。\n纯文本，代码类型的传输起来没有一点压力，而版图数据等就不是那么方便了。\n 将数据分析，debug搬至云端，降低数据传输的频次 利用EDA shell来 debug 错峰传输，比如晚上  数据格式 虽然开一个socket通道，什么数据格式都可以传输。\n除了IC 的专有格式之外，配置也好，元数据也好，选择json应该是相对比较友好的格式。\n混合云/多云 每家云服务商的接口不尽相同，对于一个CAD框架来说，无论是面对本地环境也好，云环境也罢，都需要有一个坚实的底层架构。\n基础架构的健壮性可以做到不变应万变。\nReference  DAC 2019: Design on Cloud EDA is Better in the Cloud. Here’s Why the Cloud is the Future of EDA Optimizing Electronic Design Automation (EDA) Workflows on AWS 更多参考文献，加入知识星球可获得所有离线资源  ","id":13,"section":"posts","summary":"CAD Framework 的目标是让使用者忘记框架，专心于具体的IC 设计工作。 Framework 能做的尽量让Framework 去做； Framework 不能做的，想办法让Framework 去做。 在","tags":["cad","framework","cloud"],"title":"CAD 框架: Cloud 带来的变化","uri":"https://icsteve.com/zh/2020/01/cad_framework_cloud/","year":"2020"},{"content":"一个框架的部署牵涉到的东西太多，这里聊聊为什么部署一个大而全的框架那么困难，sFramework 准备怎么做。\n你到了一个新的公司，很多时候你不得不学习新公司的一整套工作模式，这样的工作模式是一种相对看得见的代码来说更加无形的一种框架，而且很多公司的文档并不那么齐全，做过几个项目以后你或许对无形的框架有一定的了解了，使用起来也得心应手了，我们有没有一个更好的解决方案呢。 sFramework 的出发点在哪里？\nCAD Framework 可有可无 当Schedule 的大山压过来，什么都可以让路，不要说CAD Framework 了，尤其是CAD Framework 的support 有时候还不给力。\n一个配置文件加一个脚本文件就是最简单的框架，运行时和配置分离的框架，不想用框架的人用这一个理由就够了。\n所以当CAD Framework 的耦合性太大，就显得不够flexible，而当CAD Framework 太简单时，似乎没有了用的必要。\nCAD Framework 部署和维护成本太高 当你需要一个Team 专职做CAD 的时候，那么你的Team 应该是个很大的Team 了，因为单个小Team 的交流都可以用吼一声来解决。\n部署了CAD Framework 不管是软件也好，一套work flow 也好，都需要有人去维护，没有了support 的CAD Framework 无法存活。\nsFramework 希望探索的路 如果要一个团队在一个小时的某CAD Framework 介绍后就去使用这个CAD 框架，我相信这个是天方夜谭，就像之前说的两个理由，CAD 这个东西有或没有真的影响不大。\n当一个资深工程师离职了，有没有把一些经验沉淀，传承？当你离职的时候，你是不是很多知识点都是基于原公司的work flow 上的，你自己的知识积累在哪里？\n看客们，你同意以下说法吗？\n sFramework 基本核心功能均使用Tcl 编写，IC 行业的必备脚本语言，不会的请出列 sFramework 并不依赖于某家工具，集成多家工具很方便 sFramework 的各个模块可以单独使用，每个模块的功能可以使用插件来扩展，兼具了整体性和局部性 sFramework 面向的对象是一线工程师，所以都可以用这么一套框架来管理自己的项目，脚本和生成项目报告等 sFramework 可统一部署，并和一线工程师的个人部署无缝融合  sFramework 分离线版和在线版，离线版又分个人版和高级版，针对的对象不同，功能有所差异   sFramework 第一版的子功能开发测试  sFlow，脚本管理，让你的脚本活起来 sReport，报告管理，整合现在流行的Web 图表功能，轻松生成项目报告 sWeb，可以本地启动的Web 服务器，含多个基于网页的子模块，如生成ppt 等   sFramework 第二版子功能预告  sProject，管理项目，看板，todo，schedule 一个都不能少，还有更多 sResource，资源管理，所有的资源严格上都可以成为IP，不仅是design IP，流程还有文档等都是一种IP    ","id":14,"section":"posts","summary":"一个框架的部署牵涉到的东西太多，这里聊聊为什么部署一个大而全的框架那么困难，sFramework 准备怎么做。 你到了一个新的公司，很多时候你不","tags":["cad","framework"],"title":"CAD 框架: 框架为什么难落地","uri":"https://icsteve.com/zh/2020/01/cad_framework_deploy/","year":"2020"},{"content":"This is a terminal recording tool.\nEnjoy a lightweight, purely text-based approach to terminal recording.\nDeploymnet Make sure you have python3 installed.\nI will use \u0026ldquo;Run from source\u0026rdquo; approach.\n download source  git clone https://github.com/asciinema/asciinema.git cd asciinema pwd   set PYTHONPATH  for bash\nexport PYTHONPATH=`pwd` ;  setenv PYTHONPATH `pwd` ;   Create command alias  alias asciinema=\u0026quot;python3 -m asciinema \u0026quot;  alias asciinema 'python3 -m asciinema \\!*' ;  Recording asciinema rec test.cast  Display \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;http://icsteve.com/vendor/asciinema-player/asciinema-player.css\u0026quot; /\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;http://icsteve.com/assert/default.css\u0026quot; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var args={}; args[\u0026quot;f\u0026quot;]=\u0026quot;test\u0026quot; ; if (typeof args[\u0026quot;f\u0026quot;]!==\u0026quot;undefined\u0026quot; \u0026amp;\u0026amp; args[\u0026quot;f\u0026quot;]!==null) { document.write(\u0026quot;\u0026lt;asciinema-player src=\\\u0026quot;assert/\u0026quot;+args[\u0026quot;f\u0026quot;]+\u0026quot;.cast\\\u0026quot; cols=\\\u0026quot;120\\\u0026quot; font-size=\\\u0026quot;16px\\\u0026quot; theme=\\\u0026quot;monokai\\\u0026quot;\u0026gt;\u0026lt;/asciinema-player\u0026gt;\u0026quot;) ; } else { document.write(\u0026quot;Please provide URL argument like: ?show=demo_name.\u0026quot;) ; } \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;http://icsteve.com/vendor/asciinema-player/asciinema-player.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Showtime http://icsteve.com/demo/asciinema-player.html\n","id":15,"section":"posts","summary":"This is a terminal recording tool. Enjoy a lightweight, purely text-based approach to terminal recording. Deploymnet Make sure you have python3 installed. I will use \u0026ldquo;Run from source\u0026rdquo; approach. download source git clone https://github.com/asciinema/asciinema.git cd asciinema pwd set PYTHONPATH for bash export PYTHONPATH=`pwd` ; setenv PYTHONPATH `pwd` ; Create command alias alias asciinema=\u0026quot;python3 -m asciinema \u0026quot; alias asciinema 'python3 -m asciinema \\!*' ; Recording asciinema rec test.cast Display \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;","tags":["cad","asciinema"],"title":"使用 Asciinema 来录制终端","uri":"https://icsteve.com/zh/2020/01/cad_asciinema_deploy/","year":"2020"}],"tags":[{"title":"asciinema","uri":"https://icsteve.com/zh/tags/asciinema/"},{"title":"cad","uri":"https://icsteve.com/zh/tags/cad/"},{"title":"CLI","uri":"https://icsteve.com/zh/tags/cli/"},{"title":"cloud","uri":"https://icsteve.com/zh/tags/cloud/"},{"title":"collection","uri":"https://icsteve.com/zh/tags/collection/"},{"title":"Csh","uri":"https://icsteve.com/zh/tags/csh/"},{"title":"english","uri":"https://icsteve.com/zh/tags/english/"},{"title":"framework","uri":"https://icsteve.com/zh/tags/framework/"},{"title":"Learning","uri":"https://icsteve.com/zh/tags/learning/"},{"title":"notion","uri":"https://icsteve.com/zh/tags/notion/"},{"title":"PM","uri":"https://icsteve.com/zh/tags/pm/"},{"title":"RUI","uri":"https://icsteve.com/zh/tags/rui/"},{"title":"Tcl","uri":"https://icsteve.com/zh/tags/tcl/"},{"title":"tree","uri":"https://icsteve.com/zh/tags/tree/"},{"title":"youtube","uri":"https://icsteve.com/zh/tags/youtube/"}]}